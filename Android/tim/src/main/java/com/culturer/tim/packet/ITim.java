/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-22")
public class ITim {

  public interface Iface {

    /**
     * 流程开始
     * 
     * @param param
     */
    public void timStream(com.tim.packet.TimParam param) throws org.apache.thrift.TException;

    /**
     * tls协议
     */
    public void timStarttls() throws org.apache.thrift.TException;

    /**
     * 登陆协议
     * 
     * @param tid
     * @param pwd
     */
    public void timLogin(com.tim.packet.Tid tid, String pwd) throws org.apache.thrift.TException;

    /**
     * 回执信息
     * 
     * @param ab
     */
    public void timAck(com.tim.packet.TimAckBean ab) throws org.apache.thrift.TException;

    /**
     * 广播出席协议或接收广播协议
     * 
     * @param pbean
     */
    public void timPresence(com.tim.packet.TimPBean pbean) throws org.apache.thrift.TException;

    /**
     * 发送信息或接收信息
     * 
     * @param mbean
     */
    public void timMessage(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException;

    /**
     * ping 心跳协议
     * 
     * @param threadId
     */
    public void timPing(String threadId) throws org.apache.thrift.TException;

    /**
     * 错误通知
     * 
     * @param e
     */
    public void timError(com.tim.packet.TimError e) throws org.apache.thrift.TException;

    /**
     * 登出协议
     */
    public void timLogout() throws org.apache.thrift.TException;

    /**
     * 注册协议
     * 
     * @param tid
     * @param auth
     */
    public void timRegist(com.tim.packet.Tid tid, String auth) throws org.apache.thrift.TException;

    /**
     * 花名册
     * 
     * @param roster
     */
    public void timRoser(com.tim.packet.TimRoster roster) throws org.apache.thrift.TException;

    /**
     * 发送信息或接收信息列表（合流）
     * 
     * @param mbeanList
     */
    public void timMessageList(com.tim.packet.TimMBeanList mbeanList) throws org.apache.thrift.TException;

    /**
     * 发送状态信息列表（合流）
     * 
     * @param pbeanList
     */
    public void timPresenceList(com.tim.packet.TimPBeanList pbeanList) throws org.apache.thrift.TException;

    /**
     * 信息请求 get请求数据 del删除
     * 
     * @param timMsgIq
     * @param iqType
     */
    public void timMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType) throws org.apache.thrift.TException;

    /**
     * 信息请求
     * 
     * @param mbean
     */
    public void timMessageResult(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException;

    /**
     * 用户协议属性请求
     * 
     * @param tpb
     */
    public void timProperty(com.tim.packet.TimPropertyBean tpb) throws org.apache.thrift.TException;

    /**
     * 请求远程验证信息
     * 
     * @param tid
     * @param pwd
     * @param auth
     */
    public com.tim.packet.TimRemoteUserBean timRemoteUserAuth(com.tim.packet.Tid tid, String pwd, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 请求远程用户信息
     * 
     * @param tid
     * @param auth
     */
    public com.tim.packet.TimRemoteUserBean timRemoteUserGet(com.tim.packet.Tid tid, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 编辑远程用户信息
     * 
     * @param tid
     * @param ub
     * @param auth
     */
    public com.tim.packet.TimRemoteUserBean timRemoteUserEdit(com.tim.packet.Tid tid, com.tim.packet.TimUserBean ub, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 广播出席协议或接收广播协议
     * 
     * @param pbean
     * @param auth
     */
    public com.tim.packet.TimResponseBean timResponsePresence(com.tim.packet.TimPBean pbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 发送信息或接收信息
     * 
     * @param mbean
     * @param auth
     */
    public com.tim.packet.TimResponseBean timResponseMessage(com.tim.packet.TimMBean mbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 信息请求 get请求数据 del删除（辅助接口）
     * 
     * @param timMsgIq
     * @param iqType
     * @param auth
     */
    public com.tim.packet.TimMBeanList timResponseMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 广播出席协议或接收广播协议
     * 
     * @param pbeanList
     * @param auth
     */
    public com.tim.packet.TimResponseBean timResponsePresenceList(com.tim.packet.TimPBeanList pbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

    /**
     * 发送信息或接收信息
     * 
     * @param mbeanList
     * @param auth
     */
    public com.tim.packet.TimResponseBean timResponseMessageList(com.tim.packet.TimMBeanList mbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void timStream(com.tim.packet.TimParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timStarttls(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timLogin(com.tim.packet.Tid tid, String pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timAck(com.tim.packet.TimAckBean ab, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timPresence(com.tim.packet.TimPBean pbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timMessage(com.tim.packet.TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timPing(String threadId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timError(com.tim.packet.TimError e, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timLogout(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timRegist(com.tim.packet.Tid tid, String auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timRoser(com.tim.packet.TimRoster roster, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timMessageList(com.tim.packet.TimMBeanList mbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timPresenceList(com.tim.packet.TimPBeanList pbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timMessageResult(com.tim.packet.TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timProperty(com.tim.packet.TimPropertyBean tpb, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timRemoteUserAuth(com.tim.packet.Tid tid, String pwd, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timRemoteUserGet(com.tim.packet.Tid tid, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timRemoteUserEdit(com.tim.packet.Tid tid, com.tim.packet.TimUserBean ub, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timResponsePresence(com.tim.packet.TimPBean pbean, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timResponseMessage(com.tim.packet.TimMBean mbean, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timResponseMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timResponsePresenceList(com.tim.packet.TimPBeanList pbeanList, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void timResponseMessageList(com.tim.packet.TimMBeanList mbeanList, com.tim.packet.TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void timStream(com.tim.packet.TimParam param) throws org.apache.thrift.TException
    {
      send_timStream(param);
    }

    public void send_timStream(com.tim.packet.TimParam param) throws org.apache.thrift.TException
    {
      timStream_args args = new timStream_args();
      args.setParam(param);
      sendBaseOneway("timStream", args);
    }

    public void timStarttls() throws org.apache.thrift.TException
    {
      send_timStarttls();
    }

    public void send_timStarttls() throws org.apache.thrift.TException
    {
      timStarttls_args args = new timStarttls_args();
      sendBaseOneway("timStarttls", args);
    }

    public void timLogin(com.tim.packet.Tid tid, String pwd) throws org.apache.thrift.TException
    {
      send_timLogin(tid, pwd);
    }

    public void send_timLogin(com.tim.packet.Tid tid, String pwd) throws org.apache.thrift.TException
    {
      timLogin_args args = new timLogin_args();
      args.setTid(tid);
      args.setPwd(pwd);
      sendBaseOneway("timLogin", args);
    }

    public void timAck(com.tim.packet.TimAckBean ab) throws org.apache.thrift.TException
    {
      send_timAck(ab);
    }

    public void send_timAck(com.tim.packet.TimAckBean ab) throws org.apache.thrift.TException
    {
      timAck_args args = new timAck_args();
      args.setAb(ab);
      sendBaseOneway("timAck", args);
    }

    public void timPresence(com.tim.packet.TimPBean pbean) throws org.apache.thrift.TException
    {
      send_timPresence(pbean);
    }

    public void send_timPresence(com.tim.packet.TimPBean pbean) throws org.apache.thrift.TException
    {
      timPresence_args args = new timPresence_args();
      args.setPbean(pbean);
      sendBaseOneway("timPresence", args);
    }

    public void timMessage(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException
    {
      send_timMessage(mbean);
    }

    public void send_timMessage(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException
    {
      timMessage_args args = new timMessage_args();
      args.setMbean(mbean);
      sendBaseOneway("timMessage", args);
    }

    public void timPing(String threadId) throws org.apache.thrift.TException
    {
      send_timPing(threadId);
    }

    public void send_timPing(String threadId) throws org.apache.thrift.TException
    {
      timPing_args args = new timPing_args();
      args.setThreadId(threadId);
      sendBaseOneway("timPing", args);
    }

    public void timError(com.tim.packet.TimError e) throws org.apache.thrift.TException
    {
      send_timError(e);
    }

    public void send_timError(com.tim.packet.TimError e) throws org.apache.thrift.TException
    {
      timError_args args = new timError_args();
      args.setE(e);
      sendBaseOneway("timError", args);
    }

    public void timLogout() throws org.apache.thrift.TException
    {
      send_timLogout();
    }

    public void send_timLogout() throws org.apache.thrift.TException
    {
      timLogout_args args = new timLogout_args();
      sendBaseOneway("timLogout", args);
    }

    public void timRegist(com.tim.packet.Tid tid, String auth) throws org.apache.thrift.TException
    {
      send_timRegist(tid, auth);
    }

    public void send_timRegist(com.tim.packet.Tid tid, String auth) throws org.apache.thrift.TException
    {
      timRegist_args args = new timRegist_args();
      args.setTid(tid);
      args.setAuth(auth);
      sendBaseOneway("timRegist", args);
    }

    public void timRoser(com.tim.packet.TimRoster roster) throws org.apache.thrift.TException
    {
      send_timRoser(roster);
    }

    public void send_timRoser(com.tim.packet.TimRoster roster) throws org.apache.thrift.TException
    {
      timRoser_args args = new timRoser_args();
      args.setRoster(roster);
      sendBaseOneway("timRoser", args);
    }

    public void timMessageList(com.tim.packet.TimMBeanList mbeanList) throws org.apache.thrift.TException
    {
      send_timMessageList(mbeanList);
    }

    public void send_timMessageList(com.tim.packet.TimMBeanList mbeanList) throws org.apache.thrift.TException
    {
      timMessageList_args args = new timMessageList_args();
      args.setMbeanList(mbeanList);
      sendBaseOneway("timMessageList", args);
    }

    public void timPresenceList(com.tim.packet.TimPBeanList pbeanList) throws org.apache.thrift.TException
    {
      send_timPresenceList(pbeanList);
    }

    public void send_timPresenceList(com.tim.packet.TimPBeanList pbeanList) throws org.apache.thrift.TException
    {
      timPresenceList_args args = new timPresenceList_args();
      args.setPbeanList(pbeanList);
      sendBaseOneway("timPresenceList", args);
    }

    public void timMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType) throws org.apache.thrift.TException
    {
      send_timMessageIq(timMsgIq, iqType);
    }

    public void send_timMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType) throws org.apache.thrift.TException
    {
      timMessageIq_args args = new timMessageIq_args();
      args.setTimMsgIq(timMsgIq);
      args.setIqType(iqType);
      sendBaseOneway("timMessageIq", args);
    }

    public void timMessageResult(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException
    {
      send_timMessageResult(mbean);
    }

    public void send_timMessageResult(com.tim.packet.TimMBean mbean) throws org.apache.thrift.TException
    {
      timMessageResult_args args = new timMessageResult_args();
      args.setMbean(mbean);
      sendBaseOneway("timMessageResult", args);
    }

    public void timProperty(com.tim.packet.TimPropertyBean tpb) throws org.apache.thrift.TException
    {
      send_timProperty(tpb);
    }

    public void send_timProperty(com.tim.packet.TimPropertyBean tpb) throws org.apache.thrift.TException
    {
      timProperty_args args = new timProperty_args();
      args.setTpb(tpb);
      sendBaseOneway("timProperty", args);
    }

    public com.tim.packet.TimRemoteUserBean timRemoteUserAuth(com.tim.packet.Tid tid, String pwd, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timRemoteUserAuth(tid, pwd, auth);
      return recv_timRemoteUserAuth();
    }

    public void send_timRemoteUserAuth(com.tim.packet.Tid tid, String pwd, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timRemoteUserAuth_args args = new timRemoteUserAuth_args();
      args.setTid(tid);
      args.setPwd(pwd);
      args.setAuth(auth);
      sendBase("timRemoteUserAuth", args);
    }

    public com.tim.packet.TimRemoteUserBean recv_timRemoteUserAuth() throws org.apache.thrift.TException
    {
      timRemoteUserAuth_result result = new timRemoteUserAuth_result();
      receiveBase(result, "timRemoteUserAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timRemoteUserAuth failed: unknown result");
    }

    public com.tim.packet.TimRemoteUserBean timRemoteUserGet(com.tim.packet.Tid tid, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timRemoteUserGet(tid, auth);
      return recv_timRemoteUserGet();
    }

    public void send_timRemoteUserGet(com.tim.packet.Tid tid, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timRemoteUserGet_args args = new timRemoteUserGet_args();
      args.setTid(tid);
      args.setAuth(auth);
      sendBase("timRemoteUserGet", args);
    }

    public com.tim.packet.TimRemoteUserBean recv_timRemoteUserGet() throws org.apache.thrift.TException
    {
      timRemoteUserGet_result result = new timRemoteUserGet_result();
      receiveBase(result, "timRemoteUserGet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timRemoteUserGet failed: unknown result");
    }

    public com.tim.packet.TimRemoteUserBean timRemoteUserEdit(com.tim.packet.Tid tid, com.tim.packet.TimUserBean ub, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timRemoteUserEdit(tid, ub, auth);
      return recv_timRemoteUserEdit();
    }

    public void send_timRemoteUserEdit(com.tim.packet.Tid tid, com.tim.packet.TimUserBean ub, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timRemoteUserEdit_args args = new timRemoteUserEdit_args();
      args.setTid(tid);
      args.setUb(ub);
      args.setAuth(auth);
      sendBase("timRemoteUserEdit", args);
    }

    public com.tim.packet.TimRemoteUserBean recv_timRemoteUserEdit() throws org.apache.thrift.TException
    {
      timRemoteUserEdit_result result = new timRemoteUserEdit_result();
      receiveBase(result, "timRemoteUserEdit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timRemoteUserEdit failed: unknown result");
    }

    public com.tim.packet.TimResponseBean timResponsePresence(com.tim.packet.TimPBean pbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timResponsePresence(pbean, auth);
      return recv_timResponsePresence();
    }

    public void send_timResponsePresence(com.tim.packet.TimPBean pbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timResponsePresence_args args = new timResponsePresence_args();
      args.setPbean(pbean);
      args.setAuth(auth);
      sendBase("timResponsePresence", args);
    }

    public com.tim.packet.TimResponseBean recv_timResponsePresence() throws org.apache.thrift.TException
    {
      timResponsePresence_result result = new timResponsePresence_result();
      receiveBase(result, "timResponsePresence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timResponsePresence failed: unknown result");
    }

    public com.tim.packet.TimResponseBean timResponseMessage(com.tim.packet.TimMBean mbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timResponseMessage(mbean, auth);
      return recv_timResponseMessage();
    }

    public void send_timResponseMessage(com.tim.packet.TimMBean mbean, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timResponseMessage_args args = new timResponseMessage_args();
      args.setMbean(mbean);
      args.setAuth(auth);
      sendBase("timResponseMessage", args);
    }

    public com.tim.packet.TimResponseBean recv_timResponseMessage() throws org.apache.thrift.TException
    {
      timResponseMessage_result result = new timResponseMessage_result();
      receiveBase(result, "timResponseMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timResponseMessage failed: unknown result");
    }

    public com.tim.packet.TimMBeanList timResponseMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timResponseMessageIq(timMsgIq, iqType, auth);
      return recv_timResponseMessageIq();
    }

    public void send_timResponseMessageIq(com.tim.packet.TimMessageIq timMsgIq, String iqType, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timResponseMessageIq_args args = new timResponseMessageIq_args();
      args.setTimMsgIq(timMsgIq);
      args.setIqType(iqType);
      args.setAuth(auth);
      sendBase("timResponseMessageIq", args);
    }

    public com.tim.packet.TimMBeanList recv_timResponseMessageIq() throws org.apache.thrift.TException
    {
      timResponseMessageIq_result result = new timResponseMessageIq_result();
      receiveBase(result, "timResponseMessageIq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timResponseMessageIq failed: unknown result");
    }

    public com.tim.packet.TimResponseBean timResponsePresenceList(com.tim.packet.TimPBeanList pbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timResponsePresenceList(pbeanList, auth);
      return recv_timResponsePresenceList();
    }

    public void send_timResponsePresenceList(com.tim.packet.TimPBeanList pbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timResponsePresenceList_args args = new timResponsePresenceList_args();
      args.setPbeanList(pbeanList);
      args.setAuth(auth);
      sendBase("timResponsePresenceList", args);
    }

    public com.tim.packet.TimResponseBean recv_timResponsePresenceList() throws org.apache.thrift.TException
    {
      timResponsePresenceList_result result = new timResponsePresenceList_result();
      receiveBase(result, "timResponsePresenceList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timResponsePresenceList failed: unknown result");
    }

    public com.tim.packet.TimResponseBean timResponseMessageList(com.tim.packet.TimMBeanList mbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      send_timResponseMessageList(mbeanList, auth);
      return recv_timResponseMessageList();
    }

    public void send_timResponseMessageList(com.tim.packet.TimMBeanList mbeanList, com.tim.packet.TimAuth auth) throws org.apache.thrift.TException
    {
      timResponseMessageList_args args = new timResponseMessageList_args();
      args.setMbeanList(mbeanList);
      args.setAuth(auth);
      sendBase("timResponseMessageList", args);
    }

    public com.tim.packet.TimResponseBean recv_timResponseMessageList() throws org.apache.thrift.TException
    {
      timResponseMessageList_result result = new timResponseMessageList_result();
      receiveBase(result, "timResponseMessageList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timResponseMessageList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void timStream(com.tim.packet.TimParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timStream_call method_call = new timStream_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tim.packet.TimParam param;
      public timStream_call(com.tim.packet.TimParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timStream", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timStream_args args = new timStream_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timStarttls(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timStarttls_call method_call = new timStarttls_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timStarttls_call extends org.apache.thrift.async.TAsyncMethodCall {
      public timStarttls_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timStarttls", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timStarttls_args args = new timStarttls_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timLogin(com.tim.packet.Tid tid, String pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timLogin_call method_call = new timLogin_call(tid, pwd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tim.packet.Tid tid;
      private String pwd;
      public timLogin_call(com.tim.packet.Tid tid, String pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.tid = tid;
        this.pwd = pwd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timLogin", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timLogin_args args = new timLogin_args();
        args.setTid(tid);
        args.setPwd(pwd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timAck(com.tim.packet.TimAckBean ab, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timAck_call method_call = new timAck_call(ab, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timAck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.tim.packet.TimAckBean ab;
      public timAck_call(com.tim.packet.TimAckBean ab, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.ab = ab;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timAck", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timAck_args args = new timAck_args();
        args.setAb(ab);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timPresence(TimPBean pbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timPresence_call method_call = new timPresence_call(pbean, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timPresence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimPBean pbean;
      public timPresence_call(TimPBean pbean, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.pbean = pbean;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timPresence", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timPresence_args args = new timPresence_args();
        args.setPbean(pbean);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timMessage(TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timMessage_call method_call = new timMessage_call(mbean, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMBean mbean;
      public timMessage_call(TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.mbean = mbean;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timMessage", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timMessage_args args = new timMessage_args();
        args.setMbean(mbean);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timPing(String threadId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timPing_call method_call = new timPing_call(threadId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timPing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String threadId;
      public timPing_call(String threadId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.threadId = threadId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timPing", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timPing_args args = new timPing_args();
        args.setThreadId(threadId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timError(TimError e, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timError_call method_call = new timError_call(e, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timError_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimError e;
      public timError_call(TimError e, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.e = e;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timError_args args = new timError_args();
        args.setE(e);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timLogout(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timLogout_call method_call = new timLogout_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timLogout_call extends org.apache.thrift.async.TAsyncMethodCall {
      public timLogout_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timLogout", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timLogout_args args = new timLogout_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timRegist(Tid tid, String auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timRegist_call method_call = new timRegist_call(tid, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timRegist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Tid tid;
      private String auth;
      public timRegist_call(Tid tid, String auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.tid = tid;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timRegist", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timRegist_args args = new timRegist_args();
        args.setTid(tid);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timRoser(TimRoster roster, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timRoser_call method_call = new timRoser_call(roster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timRoser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimRoster roster;
      public timRoser_call(TimRoster roster, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.roster = roster;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timRoser", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timRoser_args args = new timRoser_args();
        args.setRoster(roster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timMessageList(TimMBeanList mbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timMessageList_call method_call = new timMessageList_call(mbeanList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timMessageList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMBeanList mbeanList;
      public timMessageList_call(TimMBeanList mbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.mbeanList = mbeanList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timMessageList", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timMessageList_args args = new timMessageList_args();
        args.setMbeanList(mbeanList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timPresenceList(TimPBeanList pbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timPresenceList_call method_call = new timPresenceList_call(pbeanList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timPresenceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimPBeanList pbeanList;
      public timPresenceList_call(TimPBeanList pbeanList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.pbeanList = pbeanList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timPresenceList", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timPresenceList_args args = new timPresenceList_args();
        args.setPbeanList(pbeanList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timMessageIq(TimMessageIq timMsgIq, String iqType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timMessageIq_call method_call = new timMessageIq_call(timMsgIq, iqType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timMessageIq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMessageIq timMsgIq;
      private String iqType;
      public timMessageIq_call(TimMessageIq timMsgIq, String iqType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.timMsgIq = timMsgIq;
        this.iqType = iqType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timMessageIq", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timMessageIq_args args = new timMessageIq_args();
        args.setTimMsgIq(timMsgIq);
        args.setIqType(iqType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timMessageResult(TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timMessageResult_call method_call = new timMessageResult_call(mbean, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timMessageResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMBean mbean;
      public timMessageResult_call(TimMBean mbean, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.mbean = mbean;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timMessageResult", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timMessageResult_args args = new timMessageResult_args();
        args.setMbean(mbean);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timProperty(TimPropertyBean tpb, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timProperty_call method_call = new timProperty_call(tpb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimPropertyBean tpb;
      public timProperty_call(TimPropertyBean tpb, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.tpb = tpb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timProperty", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        timProperty_args args = new timProperty_args();
        args.setTpb(tpb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void timRemoteUserAuth(Tid tid, String pwd, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timRemoteUserAuth_call method_call = new timRemoteUserAuth_call(tid, pwd, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timRemoteUserAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Tid tid;
      private String pwd;
      private TimAuth auth;
      public timRemoteUserAuth_call(Tid tid, String pwd, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tid = tid;
        this.pwd = pwd;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timRemoteUserAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timRemoteUserAuth_args args = new timRemoteUserAuth_args();
        args.setTid(tid);
        args.setPwd(pwd);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimRemoteUserBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timRemoteUserAuth();
      }
    }

    public void timRemoteUserGet(Tid tid, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timRemoteUserGet_call method_call = new timRemoteUserGet_call(tid, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timRemoteUserGet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Tid tid;
      private TimAuth auth;
      public timRemoteUserGet_call(Tid tid, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tid = tid;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timRemoteUserGet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timRemoteUserGet_args args = new timRemoteUserGet_args();
        args.setTid(tid);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimRemoteUserBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timRemoteUserGet();
      }
    }

    public void timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timRemoteUserEdit_call method_call = new timRemoteUserEdit_call(tid, ub, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timRemoteUserEdit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Tid tid;
      private TimUserBean ub;
      private TimAuth auth;
      public timRemoteUserEdit_call(Tid tid, TimUserBean ub, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tid = tid;
        this.ub = ub;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timRemoteUserEdit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timRemoteUserEdit_args args = new timRemoteUserEdit_args();
        args.setTid(tid);
        args.setUb(ub);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimRemoteUserBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timRemoteUserEdit();
      }
    }

    public void timResponsePresence(TimPBean pbean, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timResponsePresence_call method_call = new timResponsePresence_call(pbean, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timResponsePresence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimPBean pbean;
      private TimAuth auth;
      public timResponsePresence_call(TimPBean pbean, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pbean = pbean;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timResponsePresence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timResponsePresence_args args = new timResponsePresence_args();
        args.setPbean(pbean);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimResponseBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timResponsePresence();
      }
    }

    public void timResponseMessage(TimMBean mbean, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timResponseMessage_call method_call = new timResponseMessage_call(mbean, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timResponseMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMBean mbean;
      private TimAuth auth;
      public timResponseMessage_call(TimMBean mbean, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbean = mbean;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timResponseMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timResponseMessage_args args = new timResponseMessage_args();
        args.setMbean(mbean);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimResponseBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timResponseMessage();
      }
    }

    public void timResponseMessageIq(TimMessageIq timMsgIq, String iqType, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timResponseMessageIq_call method_call = new timResponseMessageIq_call(timMsgIq, iqType, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timResponseMessageIq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMessageIq timMsgIq;
      private String iqType;
      private TimAuth auth;
      public timResponseMessageIq_call(TimMessageIq timMsgIq, String iqType, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.timMsgIq = timMsgIq;
        this.iqType = iqType;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timResponseMessageIq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timResponseMessageIq_args args = new timResponseMessageIq_args();
        args.setTimMsgIq(timMsgIq);
        args.setIqType(iqType);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimMBeanList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timResponseMessageIq();
      }
    }

    public void timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timResponsePresenceList_call method_call = new timResponsePresenceList_call(pbeanList, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timResponsePresenceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimPBeanList pbeanList;
      private TimAuth auth;
      public timResponsePresenceList_call(TimPBeanList pbeanList, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pbeanList = pbeanList;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timResponsePresenceList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timResponsePresenceList_args args = new timResponsePresenceList_args();
        args.setPbeanList(pbeanList);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimResponseBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timResponsePresenceList();
      }
    }

    public void timResponseMessageList(TimMBeanList mbeanList, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      timResponseMessageList_call method_call = new timResponseMessageList_call(mbeanList, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timResponseMessageList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimMBeanList mbeanList;
      private TimAuth auth;
      public timResponseMessageList_call(TimMBeanList mbeanList, TimAuth auth, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbeanList = mbeanList;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timResponseMessageList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timResponseMessageList_args args = new timResponseMessageList_args();
        args.setMbeanList(mbeanList);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TimResponseBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timResponseMessageList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("timStream", new timStream());
      processMap.put("timStarttls", new timStarttls());
      processMap.put("timLogin", new timLogin());
      processMap.put("timAck", new timAck());
      processMap.put("timPresence", new timPresence());
      processMap.put("timMessage", new timMessage());
      processMap.put("timPing", new timPing());
      processMap.put("timError", new timError());
      processMap.put("timLogout", new timLogout());
      processMap.put("timRegist", new timRegist());
      processMap.put("timRoser", new timRoser());
      processMap.put("timMessageList", new timMessageList());
      processMap.put("timPresenceList", new timPresenceList());
      processMap.put("timMessageIq", new timMessageIq());
      processMap.put("timMessageResult", new timMessageResult());
      processMap.put("timProperty", new timProperty());
      processMap.put("timRemoteUserAuth", new timRemoteUserAuth());
      processMap.put("timRemoteUserGet", new timRemoteUserGet());
      processMap.put("timRemoteUserEdit", new timRemoteUserEdit());
      processMap.put("timResponsePresence", new timResponsePresence());
      processMap.put("timResponseMessage", new timResponseMessage());
      processMap.put("timResponseMessageIq", new timResponseMessageIq());
      processMap.put("timResponsePresenceList", new timResponsePresenceList());
      processMap.put("timResponseMessageList", new timResponseMessageList());
      return processMap;
    }

    public static class timStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timStream_args> {
      public timStream() {
        super("timStream");
      }

      public timStream_args getEmptyArgsInstance() {
        return new timStream_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timStream_args args) throws org.apache.thrift.TException {
        iface.timStream(args.param);
        return null;
      }
    }

    public static class timStarttls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timStarttls_args> {
      public timStarttls() {
        super("timStarttls");
      }

      public timStarttls_args getEmptyArgsInstance() {
        return new timStarttls_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timStarttls_args args) throws org.apache.thrift.TException {
        iface.timStarttls();
        return null;
      }
    }

    public static class timLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timLogin_args> {
      public timLogin() {
        super("timLogin");
      }

      public timLogin_args getEmptyArgsInstance() {
        return new timLogin_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timLogin_args args) throws org.apache.thrift.TException {
        iface.timLogin(args.tid, args.pwd);
        return null;
      }
    }

    public static class timAck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timAck_args> {
      public timAck() {
        super("timAck");
      }

      public timAck_args getEmptyArgsInstance() {
        return new timAck_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timAck_args args) throws org.apache.thrift.TException {
        iface.timAck(args.ab);
        return null;
      }
    }

    public static class timPresence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timPresence_args> {
      public timPresence() {
        super("timPresence");
      }

      public timPresence_args getEmptyArgsInstance() {
        return new timPresence_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timPresence_args args) throws org.apache.thrift.TException {
        iface.timPresence(args.pbean);
        return null;
      }
    }

    public static class timMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timMessage_args> {
      public timMessage() {
        super("timMessage");
      }

      public timMessage_args getEmptyArgsInstance() {
        return new timMessage_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timMessage_args args) throws org.apache.thrift.TException {
        iface.timMessage(args.mbean);
        return null;
      }
    }

    public static class timPing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timPing_args> {
      public timPing() {
        super("timPing");
      }

      public timPing_args getEmptyArgsInstance() {
        return new timPing_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timPing_args args) throws org.apache.thrift.TException {
        iface.timPing(args.threadId);
        return null;
      }
    }

    public static class timError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timError_args> {
      public timError() {
        super("timError");
      }

      public timError_args getEmptyArgsInstance() {
        return new timError_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timError_args args) throws org.apache.thrift.TException {
        iface.timError(args.e);
        return null;
      }
    }

    public static class timLogout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timLogout_args> {
      public timLogout() {
        super("timLogout");
      }

      public timLogout_args getEmptyArgsInstance() {
        return new timLogout_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timLogout_args args) throws org.apache.thrift.TException {
        iface.timLogout();
        return null;
      }
    }

    public static class timRegist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timRegist_args> {
      public timRegist() {
        super("timRegist");
      }

      public timRegist_args getEmptyArgsInstance() {
        return new timRegist_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timRegist_args args) throws org.apache.thrift.TException {
        iface.timRegist(args.tid, args.auth);
        return null;
      }
    }

    public static class timRoser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timRoser_args> {
      public timRoser() {
        super("timRoser");
      }

      public timRoser_args getEmptyArgsInstance() {
        return new timRoser_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timRoser_args args) throws org.apache.thrift.TException {
        iface.timRoser(args.roster);
        return null;
      }
    }

    public static class timMessageList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timMessageList_args> {
      public timMessageList() {
        super("timMessageList");
      }

      public timMessageList_args getEmptyArgsInstance() {
        return new timMessageList_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timMessageList_args args) throws org.apache.thrift.TException {
        iface.timMessageList(args.mbeanList);
        return null;
      }
    }

    public static class timPresenceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timPresenceList_args> {
      public timPresenceList() {
        super("timPresenceList");
      }

      public timPresenceList_args getEmptyArgsInstance() {
        return new timPresenceList_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timPresenceList_args args) throws org.apache.thrift.TException {
        iface.timPresenceList(args.pbeanList);
        return null;
      }
    }

    public static class timMessageIq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timMessageIq_args> {
      public timMessageIq() {
        super("timMessageIq");
      }

      public timMessageIq_args getEmptyArgsInstance() {
        return new timMessageIq_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timMessageIq_args args) throws org.apache.thrift.TException {
        iface.timMessageIq(args.timMsgIq, args.iqType);
        return null;
      }
    }

    public static class timMessageResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timMessageResult_args> {
      public timMessageResult() {
        super("timMessageResult");
      }

      public timMessageResult_args getEmptyArgsInstance() {
        return new timMessageResult_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timMessageResult_args args) throws org.apache.thrift.TException {
        iface.timMessageResult(args.mbean);
        return null;
      }
    }

    public static class timProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timProperty_args> {
      public timProperty() {
        super("timProperty");
      }

      public timProperty_args getEmptyArgsInstance() {
        return new timProperty_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, timProperty_args args) throws org.apache.thrift.TException {
        iface.timProperty(args.tpb);
        return null;
      }
    }

    public static class timRemoteUserAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timRemoteUserAuth_args> {
      public timRemoteUserAuth() {
        super("timRemoteUserAuth");
      }

      public timRemoteUserAuth_args getEmptyArgsInstance() {
        return new timRemoteUserAuth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timRemoteUserAuth_result getResult(I iface, timRemoteUserAuth_args args) throws org.apache.thrift.TException {
        timRemoteUserAuth_result result = new timRemoteUserAuth_result();
        result.success = iface.timRemoteUserAuth(args.tid, args.pwd, args.auth);
        return result;
      }
    }

    public static class timRemoteUserGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timRemoteUserGet_args> {
      public timRemoteUserGet() {
        super("timRemoteUserGet");
      }

      public timRemoteUserGet_args getEmptyArgsInstance() {
        return new timRemoteUserGet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timRemoteUserGet_result getResult(I iface, timRemoteUserGet_args args) throws org.apache.thrift.TException {
        timRemoteUserGet_result result = new timRemoteUserGet_result();
        result.success = iface.timRemoteUserGet(args.tid, args.auth);
        return result;
      }
    }

    public static class timRemoteUserEdit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timRemoteUserEdit_args> {
      public timRemoteUserEdit() {
        super("timRemoteUserEdit");
      }

      public timRemoteUserEdit_args getEmptyArgsInstance() {
        return new timRemoteUserEdit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timRemoteUserEdit_result getResult(I iface, timRemoteUserEdit_args args) throws org.apache.thrift.TException {
        timRemoteUserEdit_result result = new timRemoteUserEdit_result();
        result.success = iface.timRemoteUserEdit(args.tid, args.ub, args.auth);
        return result;
      }
    }

    public static class timResponsePresence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timResponsePresence_args> {
      public timResponsePresence() {
        super("timResponsePresence");
      }

      public timResponsePresence_args getEmptyArgsInstance() {
        return new timResponsePresence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timResponsePresence_result getResult(I iface, timResponsePresence_args args) throws org.apache.thrift.TException {
        timResponsePresence_result result = new timResponsePresence_result();
        result.success = iface.timResponsePresence(args.pbean, args.auth);
        return result;
      }
    }

    public static class timResponseMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timResponseMessage_args> {
      public timResponseMessage() {
        super("timResponseMessage");
      }

      public timResponseMessage_args getEmptyArgsInstance() {
        return new timResponseMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timResponseMessage_result getResult(I iface, timResponseMessage_args args) throws org.apache.thrift.TException {
        timResponseMessage_result result = new timResponseMessage_result();
        result.success = iface.timResponseMessage(args.mbean, args.auth);
        return result;
      }
    }

    public static class timResponseMessageIq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timResponseMessageIq_args> {
      public timResponseMessageIq() {
        super("timResponseMessageIq");
      }

      public timResponseMessageIq_args getEmptyArgsInstance() {
        return new timResponseMessageIq_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timResponseMessageIq_result getResult(I iface, timResponseMessageIq_args args) throws org.apache.thrift.TException {
        timResponseMessageIq_result result = new timResponseMessageIq_result();
        result.success = iface.timResponseMessageIq(args.timMsgIq, args.iqType, args.auth);
        return result;
      }
    }

    public static class timResponsePresenceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timResponsePresenceList_args> {
      public timResponsePresenceList() {
        super("timResponsePresenceList");
      }

      public timResponsePresenceList_args getEmptyArgsInstance() {
        return new timResponsePresenceList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timResponsePresenceList_result getResult(I iface, timResponsePresenceList_args args) throws org.apache.thrift.TException {
        timResponsePresenceList_result result = new timResponsePresenceList_result();
        result.success = iface.timResponsePresenceList(args.pbeanList, args.auth);
        return result;
      }
    }

    public static class timResponseMessageList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timResponseMessageList_args> {
      public timResponseMessageList() {
        super("timResponseMessageList");
      }

      public timResponseMessageList_args getEmptyArgsInstance() {
        return new timResponseMessageList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timResponseMessageList_result getResult(I iface, timResponseMessageList_args args) throws org.apache.thrift.TException {
        timResponseMessageList_result result = new timResponseMessageList_result();
        result.success = iface.timResponseMessageList(args.mbeanList, args.auth);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("timStream", new timStream());
      processMap.put("timStarttls", new timStarttls());
      processMap.put("timLogin", new timLogin());
      processMap.put("timAck", new timAck());
      processMap.put("timPresence", new timPresence());
      processMap.put("timMessage", new timMessage());
      processMap.put("timPing", new timPing());
      processMap.put("timError", new timError());
      processMap.put("timLogout", new timLogout());
      processMap.put("timRegist", new timRegist());
      processMap.put("timRoser", new timRoser());
      processMap.put("timMessageList", new timMessageList());
      processMap.put("timPresenceList", new timPresenceList());
      processMap.put("timMessageIq", new timMessageIq());
      processMap.put("timMessageResult", new timMessageResult());
      processMap.put("timProperty", new timProperty());
      processMap.put("timRemoteUserAuth", new timRemoteUserAuth());
      processMap.put("timRemoteUserGet", new timRemoteUserGet());
      processMap.put("timRemoteUserEdit", new timRemoteUserEdit());
      processMap.put("timResponsePresence", new timResponsePresence());
      processMap.put("timResponseMessage", new timResponseMessage());
      processMap.put("timResponseMessageIq", new timResponseMessageIq());
      processMap.put("timResponsePresenceList", new timResponsePresenceList());
      processMap.put("timResponseMessageList", new timResponseMessageList());
      return processMap;
    }

    public static class timStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timStream_args, Void> {
      public timStream() {
        super("timStream");
      }

      public timStream_args getEmptyArgsInstance() {
        return new timStream_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timStream_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timStream(args.param,resultHandler);
      }
    }

    public static class timStarttls<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timStarttls_args, Void> {
      public timStarttls() {
        super("timStarttls");
      }

      public timStarttls_args getEmptyArgsInstance() {
        return new timStarttls_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timStarttls_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timStarttls(resultHandler);
      }
    }

    public static class timLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timLogin_args, Void> {
      public timLogin() {
        super("timLogin");
      }

      public timLogin_args getEmptyArgsInstance() {
        return new timLogin_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timLogin(args.tid, args.pwd,resultHandler);
      }
    }

    public static class timAck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timAck_args, Void> {
      public timAck() {
        super("timAck");
      }

      public timAck_args getEmptyArgsInstance() {
        return new timAck_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timAck_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timAck(args.ab,resultHandler);
      }
    }

    public static class timPresence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timPresence_args, Void> {
      public timPresence() {
        super("timPresence");
      }

      public timPresence_args getEmptyArgsInstance() {
        return new timPresence_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timPresence_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timPresence(args.pbean,resultHandler);
      }
    }

    public static class timMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timMessage_args, Void> {
      public timMessage() {
        super("timMessage");
      }

      public timMessage_args getEmptyArgsInstance() {
        return new timMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timMessage(args.mbean,resultHandler);
      }
    }

    public static class timPing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timPing_args, Void> {
      public timPing() {
        super("timPing");
      }

      public timPing_args getEmptyArgsInstance() {
        return new timPing_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timPing_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timPing(args.threadId,resultHandler);
      }
    }

    public static class timError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timError_args, Void> {
      public timError() {
        super("timError");
      }

      public timError_args getEmptyArgsInstance() {
        return new timError_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timError_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timError(args.e,resultHandler);
      }
    }

    public static class timLogout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timLogout_args, Void> {
      public timLogout() {
        super("timLogout");
      }

      public timLogout_args getEmptyArgsInstance() {
        return new timLogout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timLogout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timLogout(resultHandler);
      }
    }

    public static class timRegist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timRegist_args, Void> {
      public timRegist() {
        super("timRegist");
      }

      public timRegist_args getEmptyArgsInstance() {
        return new timRegist_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timRegist_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timRegist(args.tid, args.auth,resultHandler);
      }
    }

    public static class timRoser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timRoser_args, Void> {
      public timRoser() {
        super("timRoser");
      }

      public timRoser_args getEmptyArgsInstance() {
        return new timRoser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timRoser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timRoser(args.roster,resultHandler);
      }
    }

    public static class timMessageList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timMessageList_args, Void> {
      public timMessageList() {
        super("timMessageList");
      }

      public timMessageList_args getEmptyArgsInstance() {
        return new timMessageList_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timMessageList_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timMessageList(args.mbeanList,resultHandler);
      }
    }

    public static class timPresenceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timPresenceList_args, Void> {
      public timPresenceList() {
        super("timPresenceList");
      }

      public timPresenceList_args getEmptyArgsInstance() {
        return new timPresenceList_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timPresenceList_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timPresenceList(args.pbeanList,resultHandler);
      }
    }

    public static class timMessageIq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timMessageIq_args, Void> {
      public timMessageIq() {
        super("timMessageIq");
      }

      public timMessageIq_args getEmptyArgsInstance() {
        return new timMessageIq_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timMessageIq_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timMessageIq(args.timMsgIq, args.iqType,resultHandler);
      }
    }

    public static class timMessageResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timMessageResult_args, Void> {
      public timMessageResult() {
        super("timMessageResult");
      }

      public timMessageResult_args getEmptyArgsInstance() {
        return new timMessageResult_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timMessageResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timMessageResult(args.mbean,resultHandler);
      }
    }

    public static class timProperty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timProperty_args, Void> {
      public timProperty() {
        super("timProperty");
      }

      public timProperty_args getEmptyArgsInstance() {
        return new timProperty_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, timProperty_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.timProperty(args.tpb,resultHandler);
      }
    }

    public static class timRemoteUserAuth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timRemoteUserAuth_args, com.tim.packet.TimRemoteUserBean> {
      public timRemoteUserAuth() {
        super("timRemoteUserAuth");
      }

      public timRemoteUserAuth_args getEmptyArgsInstance() {
        return new timRemoteUserAuth_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimRemoteUserBean>() {
          public void onComplete(com.tim.packet.TimRemoteUserBean o) {
            timRemoteUserAuth_result result = new timRemoteUserAuth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timRemoteUserAuth_result result = new timRemoteUserAuth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timRemoteUserAuth_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> resultHandler) throws TException {
        iface.timRemoteUserAuth(args.tid, args.pwd, args.auth,resultHandler);
      }
    }

    public static class timRemoteUserGet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timRemoteUserGet_args, com.tim.packet.TimRemoteUserBean> {
      public timRemoteUserGet() {
        super("timRemoteUserGet");
      }

      public timRemoteUserGet_args getEmptyArgsInstance() {
        return new timRemoteUserGet_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimRemoteUserBean>() {
          public void onComplete(com.tim.packet.TimRemoteUserBean o) {
            timRemoteUserGet_result result = new timRemoteUserGet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timRemoteUserGet_result result = new timRemoteUserGet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timRemoteUserGet_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> resultHandler) throws TException {
        iface.timRemoteUserGet(args.tid, args.auth,resultHandler);
      }
    }

    public static class timRemoteUserEdit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timRemoteUserEdit_args, com.tim.packet.TimRemoteUserBean> {
      public timRemoteUserEdit() {
        super("timRemoteUserEdit");
      }

      public timRemoteUserEdit_args getEmptyArgsInstance() {
        return new timRemoteUserEdit_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimRemoteUserBean>() {
          public void onComplete(com.tim.packet.TimRemoteUserBean o) {
            timRemoteUserEdit_result result = new timRemoteUserEdit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timRemoteUserEdit_result result = new timRemoteUserEdit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timRemoteUserEdit_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimRemoteUserBean> resultHandler) throws TException {
        iface.timRemoteUserEdit(args.tid, args.ub, args.auth,resultHandler);
      }
    }

    public static class timResponsePresence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timResponsePresence_args, com.tim.packet.TimResponseBean> {
      public timResponsePresence() {
        super("timResponsePresence");
      }

      public timResponsePresence_args getEmptyArgsInstance() {
        return new timResponsePresence_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimResponseBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimResponseBean>() {
          public void onComplete(com.tim.packet.TimResponseBean o) {
            timResponsePresence_result result = new timResponsePresence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timResponsePresence_result result = new timResponsePresence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timResponsePresence_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimResponseBean> resultHandler) throws TException {
        iface.timResponsePresence(args.pbean, args.auth,resultHandler);
      }
    }

    public static class timResponseMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timResponseMessage_args, com.tim.packet.TimResponseBean> {
      public timResponseMessage() {
        super("timResponseMessage");
      }

      public timResponseMessage_args getEmptyArgsInstance() {
        return new timResponseMessage_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimResponseBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimResponseBean>() {
          public void onComplete(com.tim.packet.TimResponseBean o) {
            timResponseMessage_result result = new timResponseMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timResponseMessage_result result = new timResponseMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timResponseMessage_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimResponseBean> resultHandler) throws TException {
        iface.timResponseMessage(args.mbean, args.auth,resultHandler);
      }
    }

    public static class timResponseMessageIq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timResponseMessageIq_args, com.tim.packet.TimMBeanList> {
      public timResponseMessageIq() {
        super("timResponseMessageIq");
      }

      public timResponseMessageIq_args getEmptyArgsInstance() {
        return new timResponseMessageIq_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimMBeanList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimMBeanList>() {
          public void onComplete(com.tim.packet.TimMBeanList o) {
            timResponseMessageIq_result result = new timResponseMessageIq_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timResponseMessageIq_result result = new timResponseMessageIq_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timResponseMessageIq_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimMBeanList> resultHandler) throws TException {
        iface.timResponseMessageIq(args.timMsgIq, args.iqType, args.auth,resultHandler);
      }
    }

    public static class timResponsePresenceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timResponsePresenceList_args, com.tim.packet.TimResponseBean> {
      public timResponsePresenceList() {
        super("timResponsePresenceList");
      }

      public timResponsePresenceList_args getEmptyArgsInstance() {
        return new timResponsePresenceList_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimResponseBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimResponseBean>() {
          public void onComplete(com.tim.packet.TimResponseBean o) {
            timResponsePresenceList_result result = new timResponsePresenceList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timResponsePresenceList_result result = new timResponsePresenceList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timResponsePresenceList_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimResponseBean> resultHandler) throws TException {
        iface.timResponsePresenceList(args.pbeanList, args.auth,resultHandler);
      }
    }

    public static class timResponseMessageList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timResponseMessageList_args, com.tim.packet.TimResponseBean> {
      public timResponseMessageList() {
        super("timResponseMessageList");
      }

      public timResponseMessageList_args getEmptyArgsInstance() {
        return new timResponseMessageList_args();
      }

      public AsyncMethodCallback<com.tim.packet.TimResponseBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.tim.packet.TimResponseBean>() {
          public void onComplete(com.tim.packet.TimResponseBean o) {
            timResponseMessageList_result result = new timResponseMessageList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timResponseMessageList_result result = new timResponseMessageList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timResponseMessageList_args args, org.apache.thrift.async.AsyncMethodCallback<com.tim.packet.TimResponseBean> resultHandler) throws TException {
        iface.timResponseMessageList(args.mbeanList, args.auth,resultHandler);
      }
    }

  }

  public static class timStream_args implements org.apache.thrift.TBase<timStream_args, timStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<timStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timStream_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timStream_argsTupleSchemeFactory());
    }

    public com.tim.packet.TimParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tim.packet.TimParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timStream_args.class, metaDataMap);
    }

    public timStream_args() {
    }

    public timStream_args(
      com.tim.packet.TimParam param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timStream_args(timStream_args other) {
      if (other.isSetParam()) {
        this.param = new com.tim.packet.TimParam(other.param);
      }
    }

    public timStream_args deepCopy() {
      return new timStream_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public com.tim.packet.TimParam getParam() {
      return this.param;
    }

    public timStream_args setParam(com.tim.packet.TimParam param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((com.tim.packet.TimParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timStream_args)
        return this.equals((timStream_args)that);
      return false;
    }

    public boolean equals(timStream_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      return list.hashCode();
    }

    @Override
    public int compareTo(timStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timStream_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timStream_argsStandardSchemeFactory implements SchemeFactory {
      public timStream_argsStandardScheme getScheme() {
        return new timStream_argsStandardScheme();
      }
    }

    private static class timStream_argsStandardScheme extends StandardScheme<timStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new com.tim.packet.TimParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timStream_argsTupleSchemeFactory implements SchemeFactory {
      public timStream_argsTupleScheme getScheme() {
        return new timStream_argsTupleScheme();
      }
    }

    private static class timStream_argsTupleScheme extends TupleScheme<timStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = new TimParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class timStarttls_args implements org.apache.thrift.TBase<timStarttls_args, timStarttls_args._Fields>, java.io.Serializable, Cloneable, Comparable<timStarttls_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timStarttls_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timStarttls_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timStarttls_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timStarttls_args.class, metaDataMap);
    }

    public timStarttls_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timStarttls_args(timStarttls_args other) {
    }

    public timStarttls_args deepCopy() {
      return new timStarttls_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timStarttls_args)
        return this.equals((timStarttls_args)that);
      return false;
    }

    public boolean equals(timStarttls_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(timStarttls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timStarttls_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timStarttls_argsStandardSchemeFactory implements SchemeFactory {
      public timStarttls_argsStandardScheme getScheme() {
        return new timStarttls_argsStandardScheme();
      }
    }

    private static class timStarttls_argsStandardScheme extends StandardScheme<timStarttls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timStarttls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timStarttls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timStarttls_argsTupleSchemeFactory implements SchemeFactory {
      public timStarttls_argsTupleScheme getScheme() {
        return new timStarttls_argsTupleScheme();
      }
    }

    private static class timStarttls_argsTupleScheme extends TupleScheme<timStarttls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timStarttls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timStarttls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class timLogin_args implements org.apache.thrift.TBase<timLogin_args, timLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<timLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timLogin_args");

    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timLogin_argsTupleSchemeFactory());
    }

    public Tid tid; // required
    public String pwd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TID((short)1, "tid"),
      PWD((short)2, "pwd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TID
            return TID;
          case 2: // PWD
            return PWD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timLogin_args.class, metaDataMap);
    }

    public timLogin_args() {
    }

    public timLogin_args(
      Tid tid,
      String pwd)
    {
      this();
      this.tid = tid;
      this.pwd = pwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timLogin_args(timLogin_args other) {
      if (other.isSetTid()) {
        this.tid = new Tid(other.tid);
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
    }

    public timLogin_args deepCopy() {
      return new timLogin_args(this);
    }

    @Override
    public void clear() {
      this.tid = null;
      this.pwd = null;
    }

    public Tid getTid() {
      return this.tid;
    }

    public timLogin_args setTid(Tid tid) {
      this.tid = tid;
      return this;
    }

    public void unsetTid() {
      this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
      if (!value) {
        this.tid = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public timLogin_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Tid)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TID:
        return getTid();

      case PWD:
        return getPwd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TID:
        return isSetTid();
      case PWD:
        return isSetPwd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timLogin_args)
        return this.equals((timLogin_args)that);
      return false;
    }

    public boolean equals(timLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_tid = true && this.isSetTid();
      boolean that_present_tid = true && that.isSetTid();
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (!this.tid.equals(that.tid))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tid = true && (isSetTid());
      list.add(present_tid);
      if (present_tid)
        list.add(tid);

      boolean present_pwd = true && (isSetPwd());
      list.add(present_pwd);
      if (present_pwd)
        list.add(pwd);

      return list.hashCode();
    }

    @Override
    public int compareTo(timLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timLogin_args(");
      boolean first = true;

      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tid != null) {
        tid.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timLogin_argsStandardSchemeFactory implements SchemeFactory {
      public timLogin_argsStandardScheme getScheme() {
        return new timLogin_argsStandardScheme();
      }
    }

    private static class timLogin_argsStandardScheme extends StandardScheme<timLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tid = new Tid();
                struct.tid.read(iprot);
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tid != null) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timLogin_argsTupleSchemeFactory implements SchemeFactory {
      public timLogin_argsTupleScheme getScheme() {
        return new timLogin_argsTupleScheme();
      }
    }

    private static class timLogin_argsTupleScheme extends TupleScheme<timLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTid()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTid()) {
          struct.tid.write(oprot);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tid = new Tid();
          struct.tid.read(iprot);
          struct.setTidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
      }
    }

  }

  public static class timAck_args implements org.apache.thrift.TBase<timAck_args, timAck_args._Fields>, java.io.Serializable, Cloneable, Comparable<timAck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timAck_args");

    private static final org.apache.thrift.protocol.TField AB_FIELD_DESC = new org.apache.thrift.protocol.TField("ab", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timAck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timAck_argsTupleSchemeFactory());
    }

    public TimAckBean ab; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AB((short)1, "ab");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AB
            return AB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AB, new org.apache.thrift.meta_data.FieldMetaData("ab", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAckBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timAck_args.class, metaDataMap);
    }

    public timAck_args() {
    }

    public timAck_args(
      TimAckBean ab)
    {
      this();
      this.ab = ab;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timAck_args(timAck_args other) {
      if (other.isSetAb()) {
        this.ab = new TimAckBean(other.ab);
      }
    }

    public timAck_args deepCopy() {
      return new timAck_args(this);
    }

    @Override
    public void clear() {
      this.ab = null;
    }

    public TimAckBean getAb() {
      return this.ab;
    }

    public timAck_args setAb(TimAckBean ab) {
      this.ab = ab;
      return this;
    }

    public void unsetAb() {
      this.ab = null;
    }

    /** Returns true if field ab is set (has been assigned a value) and false otherwise */
    public boolean isSetAb() {
      return this.ab != null;
    }

    public void setAbIsSet(boolean value) {
      if (!value) {
        this.ab = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AB:
        if (value == null) {
          unsetAb();
        } else {
          setAb((TimAckBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AB:
        return getAb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AB:
        return isSetAb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timAck_args)
        return this.equals((timAck_args)that);
      return false;
    }

    public boolean equals(timAck_args that) {
      if (that == null)
        return false;

      boolean this_present_ab = true && this.isSetAb();
      boolean that_present_ab = true && that.isSetAb();
      if (this_present_ab || that_present_ab) {
        if (!(this_present_ab && that_present_ab))
          return false;
        if (!this.ab.equals(that.ab))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ab = true && (isSetAb());
      list.add(present_ab);
      if (present_ab)
        list.add(ab);

      return list.hashCode();
    }

    @Override
    public int compareTo(timAck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAb()).compareTo(other.isSetAb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ab, other.ab);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timAck_args(");
      boolean first = true;

      sb.append("ab:");
      if (this.ab == null) {
        sb.append("null");
      } else {
        sb.append(this.ab);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ab != null) {
        ab.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timAck_argsStandardSchemeFactory implements SchemeFactory {
      public timAck_argsStandardScheme getScheme() {
        return new timAck_argsStandardScheme();
      }
    }

    private static class timAck_argsStandardScheme extends StandardScheme<timAck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timAck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ab = new TimAckBean();
                struct.ab.read(iprot);
                struct.setAbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timAck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ab != null) {
          oprot.writeFieldBegin(AB_FIELD_DESC);
          struct.ab.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timAck_argsTupleSchemeFactory implements SchemeFactory {
      public timAck_argsTupleScheme getScheme() {
        return new timAck_argsTupleScheme();
      }
    }

    private static class timAck_argsTupleScheme extends TupleScheme<timAck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timAck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAb()) {
          struct.ab.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timAck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ab = new TimAckBean();
          struct.ab.read(iprot);
          struct.setAbIsSet(true);
        }
      }
    }

  }

  public static class timPresence_args implements org.apache.thrift.TBase<timPresence_args, timPresence_args._Fields>, java.io.Serializable, Cloneable, Comparable<timPresence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timPresence_args");

    private static final org.apache.thrift.protocol.TField PBEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("pbean", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timPresence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timPresence_argsTupleSchemeFactory());
    }

    public TimPBean pbean; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBEAN((short)1, "pbean");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBEAN
            return PBEAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBEAN, new org.apache.thrift.meta_data.FieldMetaData("pbean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimPBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timPresence_args.class, metaDataMap);
    }

    public timPresence_args() {
    }

    public timPresence_args(
      TimPBean pbean)
    {
      this();
      this.pbean = pbean;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timPresence_args(timPresence_args other) {
      if (other.isSetPbean()) {
        this.pbean = new TimPBean(other.pbean);
      }
    }

    public timPresence_args deepCopy() {
      return new timPresence_args(this);
    }

    @Override
    public void clear() {
      this.pbean = null;
    }

    public TimPBean getPbean() {
      return this.pbean;
    }

    public timPresence_args setPbean(TimPBean pbean) {
      this.pbean = pbean;
      return this;
    }

    public void unsetPbean() {
      this.pbean = null;
    }

    /** Returns true if field pbean is set (has been assigned a value) and false otherwise */
    public boolean isSetPbean() {
      return this.pbean != null;
    }

    public void setPbeanIsSet(boolean value) {
      if (!value) {
        this.pbean = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBEAN:
        if (value == null) {
          unsetPbean();
        } else {
          setPbean((TimPBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBEAN:
        return getPbean();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBEAN:
        return isSetPbean();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timPresence_args)
        return this.equals((timPresence_args)that);
      return false;
    }

    public boolean equals(timPresence_args that) {
      if (that == null)
        return false;

      boolean this_present_pbean = true && this.isSetPbean();
      boolean that_present_pbean = true && that.isSetPbean();
      if (this_present_pbean || that_present_pbean) {
        if (!(this_present_pbean && that_present_pbean))
          return false;
        if (!this.pbean.equals(that.pbean))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pbean = true && (isSetPbean());
      list.add(present_pbean);
      if (present_pbean)
        list.add(pbean);

      return list.hashCode();
    }

    @Override
    public int compareTo(timPresence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPbean()).compareTo(other.isSetPbean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbean, other.pbean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timPresence_args(");
      boolean first = true;

      sb.append("pbean:");
      if (this.pbean == null) {
        sb.append("null");
      } else {
        sb.append(this.pbean);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbean != null) {
        pbean.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timPresence_argsStandardSchemeFactory implements SchemeFactory {
      public timPresence_argsStandardScheme getScheme() {
        return new timPresence_argsStandardScheme();
      }
    }

    private static class timPresence_argsStandardScheme extends StandardScheme<timPresence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timPresence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbean = new TimPBean();
                struct.pbean.read(iprot);
                struct.setPbeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timPresence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbean != null) {
          oprot.writeFieldBegin(PBEAN_FIELD_DESC);
          struct.pbean.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timPresence_argsTupleSchemeFactory implements SchemeFactory {
      public timPresence_argsTupleScheme getScheme() {
        return new timPresence_argsTupleScheme();
      }
    }

    private static class timPresence_argsTupleScheme extends TupleScheme<timPresence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timPresence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbean()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPbean()) {
          struct.pbean.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timPresence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pbean = new TimPBean();
          struct.pbean.read(iprot);
          struct.setPbeanIsSet(true);
        }
      }
    }

  }

  public static class timMessage_args implements org.apache.thrift.TBase<timMessage_args, timMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<timMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timMessage_args");

    private static final org.apache.thrift.protocol.TField MBEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("mbean", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timMessage_argsTupleSchemeFactory());
    }

    public TimMBean mbean; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MBEAN((short)1, "mbean");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MBEAN
            return MBEAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MBEAN, new org.apache.thrift.meta_data.FieldMetaData("mbean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timMessage_args.class, metaDataMap);
    }

    public timMessage_args() {
    }

    public timMessage_args(
      TimMBean mbean)
    {
      this();
      this.mbean = mbean;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timMessage_args(timMessage_args other) {
      if (other.isSetMbean()) {
        this.mbean = new TimMBean(other.mbean);
      }
    }

    public timMessage_args deepCopy() {
      return new timMessage_args(this);
    }

    @Override
    public void clear() {
      this.mbean = null;
    }

    public TimMBean getMbean() {
      return this.mbean;
    }

    public timMessage_args setMbean(TimMBean mbean) {
      this.mbean = mbean;
      return this;
    }

    public void unsetMbean() {
      this.mbean = null;
    }

    /** Returns true if field mbean is set (has been assigned a value) and false otherwise */
    public boolean isSetMbean() {
      return this.mbean != null;
    }

    public void setMbeanIsSet(boolean value) {
      if (!value) {
        this.mbean = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MBEAN:
        if (value == null) {
          unsetMbean();
        } else {
          setMbean((TimMBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MBEAN:
        return getMbean();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MBEAN:
        return isSetMbean();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timMessage_args)
        return this.equals((timMessage_args)that);
      return false;
    }

    public boolean equals(timMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_mbean = true && this.isSetMbean();
      boolean that_present_mbean = true && that.isSetMbean();
      if (this_present_mbean || that_present_mbean) {
        if (!(this_present_mbean && that_present_mbean))
          return false;
        if (!this.mbean.equals(that.mbean))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mbean = true && (isSetMbean());
      list.add(present_mbean);
      if (present_mbean)
        list.add(mbean);

      return list.hashCode();
    }

    @Override
    public int compareTo(timMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMbean()).compareTo(other.isSetMbean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbean, other.mbean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timMessage_args(");
      boolean first = true;

      sb.append("mbean:");
      if (this.mbean == null) {
        sb.append("null");
      } else {
        sb.append(this.mbean);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbean != null) {
        mbean.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timMessage_argsStandardSchemeFactory implements SchemeFactory {
      public timMessage_argsStandardScheme getScheme() {
        return new timMessage_argsStandardScheme();
      }
    }

    private static class timMessage_argsStandardScheme extends StandardScheme<timMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MBEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbean = new TimMBean();
                struct.mbean.read(iprot);
                struct.setMbeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbean != null) {
          oprot.writeFieldBegin(MBEAN_FIELD_DESC);
          struct.mbean.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timMessage_argsTupleSchemeFactory implements SchemeFactory {
      public timMessage_argsTupleScheme getScheme() {
        return new timMessage_argsTupleScheme();
      }
    }

    private static class timMessage_argsTupleScheme extends TupleScheme<timMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMbean()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMbean()) {
          struct.mbean.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mbean = new TimMBean();
          struct.mbean.read(iprot);
          struct.setMbeanIsSet(true);
        }
      }
    }

  }

  public static class timPing_args implements org.apache.thrift.TBase<timPing_args, timPing_args._Fields>, java.io.Serializable, Cloneable, Comparable<timPing_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timPing_args");

    private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timPing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timPing_argsTupleSchemeFactory());
    }

    public String threadId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THREAD_ID((short)1, "threadId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THREAD_ID
            return THREAD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timPing_args.class, metaDataMap);
    }

    public timPing_args() {
    }

    public timPing_args(
      String threadId)
    {
      this();
      this.threadId = threadId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timPing_args(timPing_args other) {
      if (other.isSetThreadId()) {
        this.threadId = other.threadId;
      }
    }

    public timPing_args deepCopy() {
      return new timPing_args(this);
    }

    @Override
    public void clear() {
      this.threadId = null;
    }

    public String getThreadId() {
      return this.threadId;
    }

    public timPing_args setThreadId(String threadId) {
      this.threadId = threadId;
      return this;
    }

    public void unsetThreadId() {
      this.threadId = null;
    }

    /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadId() {
      return this.threadId != null;
    }

    public void setThreadIdIsSet(boolean value) {
      if (!value) {
        this.threadId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THREAD_ID:
        if (value == null) {
          unsetThreadId();
        } else {
          setThreadId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THREAD_ID:
        return getThreadId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THREAD_ID:
        return isSetThreadId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timPing_args)
        return this.equals((timPing_args)that);
      return false;
    }

    public boolean equals(timPing_args that) {
      if (that == null)
        return false;

      boolean this_present_threadId = true && this.isSetThreadId();
      boolean that_present_threadId = true && that.isSetThreadId();
      if (this_present_threadId || that_present_threadId) {
        if (!(this_present_threadId && that_present_threadId))
          return false;
        if (!this.threadId.equals(that.threadId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_threadId = true && (isSetThreadId());
      list.add(present_threadId);
      if (present_threadId)
        list.add(threadId);

      return list.hashCode();
    }

    @Override
    public int compareTo(timPing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThreadId()).compareTo(other.isSetThreadId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreadId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timPing_args(");
      boolean first = true;

      sb.append("threadId:");
      if (this.threadId == null) {
        sb.append("null");
      } else {
        sb.append(this.threadId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timPing_argsStandardSchemeFactory implements SchemeFactory {
      public timPing_argsStandardScheme getScheme() {
        return new timPing_argsStandardScheme();
      }
    }

    private static class timPing_argsStandardScheme extends StandardScheme<timPing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timPing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THREAD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.threadId = iprot.readString();
                struct.setThreadIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timPing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.threadId != null) {
          oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
          oprot.writeString(struct.threadId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timPing_argsTupleSchemeFactory implements SchemeFactory {
      public timPing_argsTupleScheme getScheme() {
        return new timPing_argsTupleScheme();
      }
    }

    private static class timPing_argsTupleScheme extends TupleScheme<timPing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timPing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThreadId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetThreadId()) {
          oprot.writeString(struct.threadId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timPing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.threadId = iprot.readString();
          struct.setThreadIdIsSet(true);
        }
      }
    }

  }

  public static class timError_args implements org.apache.thrift.TBase<timError_args, timError_args._Fields>, java.io.Serializable, Cloneable, Comparable<timError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timError_args");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timError_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timError_argsTupleSchemeFactory());
    }

    public TimError e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timError_args.class, metaDataMap);
    }

    public timError_args() {
    }

    public timError_args(
      TimError e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timError_args(timError_args other) {
      if (other.isSetE()) {
        this.e = new TimError(other.e);
      }
    }

    public timError_args deepCopy() {
      return new timError_args(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TimError getE() {
      return this.e;
    }

    public timError_args setE(TimError e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TimError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timError_args)
        return this.equals((timError_args)that);
      return false;
    }

    public boolean equals(timError_args that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(timError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timError_args(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (e != null) {
        e.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timError_argsStandardSchemeFactory implements SchemeFactory {
      public timError_argsStandardScheme getScheme() {
        return new timError_argsStandardScheme();
      }
    }

    private static class timError_argsStandardScheme extends StandardScheme<timError_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TimError();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timError_argsTupleSchemeFactory implements SchemeFactory {
      public timError_argsTupleScheme getScheme() {
        return new timError_argsTupleScheme();
      }
    }

    private static class timError_argsTupleScheme extends TupleScheme<timError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timError_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timError_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TimError();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class timLogout_args implements org.apache.thrift.TBase<timLogout_args, timLogout_args._Fields>, java.io.Serializable, Cloneable, Comparable<timLogout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timLogout_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timLogout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timLogout_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timLogout_args.class, metaDataMap);
    }

    public timLogout_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timLogout_args(timLogout_args other) {
    }

    public timLogout_args deepCopy() {
      return new timLogout_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timLogout_args)
        return this.equals((timLogout_args)that);
      return false;
    }

    public boolean equals(timLogout_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(timLogout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timLogout_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timLogout_argsStandardSchemeFactory implements SchemeFactory {
      public timLogout_argsStandardScheme getScheme() {
        return new timLogout_argsStandardScheme();
      }
    }

    private static class timLogout_argsStandardScheme extends StandardScheme<timLogout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timLogout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timLogout_argsTupleSchemeFactory implements SchemeFactory {
      public timLogout_argsTupleScheme getScheme() {
        return new timLogout_argsTupleScheme();
      }
    }

    private static class timLogout_argsTupleScheme extends TupleScheme<timLogout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class timRegist_args implements org.apache.thrift.TBase<timRegist_args, timRegist_args._Fields>, java.io.Serializable, Cloneable, Comparable<timRegist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRegist_args");

    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRegist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRegist_argsTupleSchemeFactory());
    }

    public Tid tid; // required
    public String auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TID((short)1, "tid"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TID
            return TID;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRegist_args.class, metaDataMap);
    }

    public timRegist_args() {
    }

    public timRegist_args(
      Tid tid,
      String auth)
    {
      this();
      this.tid = tid;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRegist_args(timRegist_args other) {
      if (other.isSetTid()) {
        this.tid = new Tid(other.tid);
      }
      if (other.isSetAuth()) {
        this.auth = other.auth;
      }
    }

    public timRegist_args deepCopy() {
      return new timRegist_args(this);
    }

    @Override
    public void clear() {
      this.tid = null;
      this.auth = null;
    }

    public Tid getTid() {
      return this.tid;
    }

    public timRegist_args setTid(Tid tid) {
      this.tid = tid;
      return this;
    }

    public void unsetTid() {
      this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
      if (!value) {
        this.tid = null;
      }
    }

    public String getAuth() {
      return this.auth;
    }

    public timRegist_args setAuth(String auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Tid)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TID:
        return getTid();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TID:
        return isSetTid();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRegist_args)
        return this.equals((timRegist_args)that);
      return false;
    }

    public boolean equals(timRegist_args that) {
      if (that == null)
        return false;

      boolean this_present_tid = true && this.isSetTid();
      boolean that_present_tid = true && that.isSetTid();
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (!this.tid.equals(that.tid))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tid = true && (isSetTid());
      list.add(present_tid);
      if (present_tid)
        list.add(tid);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRegist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRegist_args(");
      boolean first = true;

      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tid != null) {
        tid.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRegist_argsStandardSchemeFactory implements SchemeFactory {
      public timRegist_argsStandardScheme getScheme() {
        return new timRegist_argsStandardScheme();
      }
    }

    private static class timRegist_argsStandardScheme extends StandardScheme<timRegist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRegist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tid = new Tid();
                struct.tid.read(iprot);
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auth = iprot.readString();
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRegist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tid != null) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          oprot.writeString(struct.auth);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRegist_argsTupleSchemeFactory implements SchemeFactory {
      public timRegist_argsTupleScheme getScheme() {
        return new timRegist_argsTupleScheme();
      }
    }

    private static class timRegist_argsTupleScheme extends TupleScheme<timRegist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTid()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTid()) {
          struct.tid.write(oprot);
        }
        if (struct.isSetAuth()) {
          oprot.writeString(struct.auth);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tid = new Tid();
          struct.tid.read(iprot);
          struct.setTidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = iprot.readString();
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timRoser_args implements org.apache.thrift.TBase<timRoser_args, timRoser_args._Fields>, java.io.Serializable, Cloneable, Comparable<timRoser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRoser_args");

    private static final org.apache.thrift.protocol.TField ROSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("roster", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRoser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRoser_argsTupleSchemeFactory());
    }

    public TimRoster roster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROSTER((short)1, "roster");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROSTER
            return ROSTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROSTER, new org.apache.thrift.meta_data.FieldMetaData("roster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRoster.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRoser_args.class, metaDataMap);
    }

    public timRoser_args() {
    }

    public timRoser_args(
      TimRoster roster)
    {
      this();
      this.roster = roster;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRoser_args(timRoser_args other) {
      if (other.isSetRoster()) {
        this.roster = new TimRoster(other.roster);
      }
    }

    public timRoser_args deepCopy() {
      return new timRoser_args(this);
    }

    @Override
    public void clear() {
      this.roster = null;
    }

    public TimRoster getRoster() {
      return this.roster;
    }

    public timRoser_args setRoster(TimRoster roster) {
      this.roster = roster;
      return this;
    }

    public void unsetRoster() {
      this.roster = null;
    }

    /** Returns true if field roster is set (has been assigned a value) and false otherwise */
    public boolean isSetRoster() {
      return this.roster != null;
    }

    public void setRosterIsSet(boolean value) {
      if (!value) {
        this.roster = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROSTER:
        if (value == null) {
          unsetRoster();
        } else {
          setRoster((TimRoster)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROSTER:
        return getRoster();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROSTER:
        return isSetRoster();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRoser_args)
        return this.equals((timRoser_args)that);
      return false;
    }

    public boolean equals(timRoser_args that) {
      if (that == null)
        return false;

      boolean this_present_roster = true && this.isSetRoster();
      boolean that_present_roster = true && that.isSetRoster();
      if (this_present_roster || that_present_roster) {
        if (!(this_present_roster && that_present_roster))
          return false;
        if (!this.roster.equals(that.roster))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roster = true && (isSetRoster());
      list.add(present_roster);
      if (present_roster)
        list.add(roster);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRoser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoster()).compareTo(other.isSetRoster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoster()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roster, other.roster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRoser_args(");
      boolean first = true;

      sb.append("roster:");
      if (this.roster == null) {
        sb.append("null");
      } else {
        sb.append(this.roster);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (roster != null) {
        roster.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRoser_argsStandardSchemeFactory implements SchemeFactory {
      public timRoser_argsStandardScheme getScheme() {
        return new timRoser_argsStandardScheme();
      }
    }

    private static class timRoser_argsStandardScheme extends StandardScheme<timRoser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRoser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROSTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.roster = new TimRoster();
                struct.roster.read(iprot);
                struct.setRosterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRoser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roster != null) {
          oprot.writeFieldBegin(ROSTER_FIELD_DESC);
          struct.roster.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRoser_argsTupleSchemeFactory implements SchemeFactory {
      public timRoser_argsTupleScheme getScheme() {
        return new timRoser_argsTupleScheme();
      }
    }

    private static class timRoser_argsTupleScheme extends TupleScheme<timRoser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRoser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoster()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoster()) {
          struct.roster.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRoser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roster = new TimRoster();
          struct.roster.read(iprot);
          struct.setRosterIsSet(true);
        }
      }
    }

  }

  public static class timMessageList_args implements org.apache.thrift.TBase<timMessageList_args, timMessageList_args._Fields>, java.io.Serializable, Cloneable, Comparable<timMessageList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timMessageList_args");

    private static final org.apache.thrift.protocol.TField MBEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mbeanList", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timMessageList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timMessageList_argsTupleSchemeFactory());
    }

    public TimMBeanList mbeanList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MBEAN_LIST((short)1, "mbeanList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MBEAN_LIST
            return MBEAN_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MBEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("mbeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBeanList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timMessageList_args.class, metaDataMap);
    }

    public timMessageList_args() {
    }

    public timMessageList_args(
      TimMBeanList mbeanList)
    {
      this();
      this.mbeanList = mbeanList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timMessageList_args(timMessageList_args other) {
      if (other.isSetMbeanList()) {
        this.mbeanList = new TimMBeanList(other.mbeanList);
      }
    }

    public timMessageList_args deepCopy() {
      return new timMessageList_args(this);
    }

    @Override
    public void clear() {
      this.mbeanList = null;
    }

    public TimMBeanList getMbeanList() {
      return this.mbeanList;
    }

    public timMessageList_args setMbeanList(TimMBeanList mbeanList) {
      this.mbeanList = mbeanList;
      return this;
    }

    public void unsetMbeanList() {
      this.mbeanList = null;
    }

    /** Returns true if field mbeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetMbeanList() {
      return this.mbeanList != null;
    }

    public void setMbeanListIsSet(boolean value) {
      if (!value) {
        this.mbeanList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MBEAN_LIST:
        if (value == null) {
          unsetMbeanList();
        } else {
          setMbeanList((TimMBeanList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MBEAN_LIST:
        return getMbeanList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MBEAN_LIST:
        return isSetMbeanList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timMessageList_args)
        return this.equals((timMessageList_args)that);
      return false;
    }

    public boolean equals(timMessageList_args that) {
      if (that == null)
        return false;

      boolean this_present_mbeanList = true && this.isSetMbeanList();
      boolean that_present_mbeanList = true && that.isSetMbeanList();
      if (this_present_mbeanList || that_present_mbeanList) {
        if (!(this_present_mbeanList && that_present_mbeanList))
          return false;
        if (!this.mbeanList.equals(that.mbeanList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mbeanList = true && (isSetMbeanList());
      list.add(present_mbeanList);
      if (present_mbeanList)
        list.add(mbeanList);

      return list.hashCode();
    }

    @Override
    public int compareTo(timMessageList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMbeanList()).compareTo(other.isSetMbeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbeanList, other.mbeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timMessageList_args(");
      boolean first = true;

      sb.append("mbeanList:");
      if (this.mbeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.mbeanList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbeanList != null) {
        mbeanList.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timMessageList_argsStandardSchemeFactory implements SchemeFactory {
      public timMessageList_argsStandardScheme getScheme() {
        return new timMessageList_argsStandardScheme();
      }
    }

    private static class timMessageList_argsStandardScheme extends StandardScheme<timMessageList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timMessageList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MBEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbeanList = new TimMBeanList();
                struct.mbeanList.read(iprot);
                struct.setMbeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timMessageList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbeanList != null) {
          oprot.writeFieldBegin(MBEAN_LIST_FIELD_DESC);
          struct.mbeanList.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timMessageList_argsTupleSchemeFactory implements SchemeFactory {
      public timMessageList_argsTupleScheme getScheme() {
        return new timMessageList_argsTupleScheme();
      }
    }

    private static class timMessageList_argsTupleScheme extends TupleScheme<timMessageList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMbeanList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMbeanList()) {
          struct.mbeanList.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mbeanList = new TimMBeanList();
          struct.mbeanList.read(iprot);
          struct.setMbeanListIsSet(true);
        }
      }
    }

  }

  public static class timPresenceList_args implements org.apache.thrift.TBase<timPresenceList_args, timPresenceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<timPresenceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timPresenceList_args");

    private static final org.apache.thrift.protocol.TField PBEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pbeanList", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timPresenceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timPresenceList_argsTupleSchemeFactory());
    }

    public TimPBeanList pbeanList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBEAN_LIST((short)1, "pbeanList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBEAN_LIST
            return PBEAN_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("pbeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimPBeanList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timPresenceList_args.class, metaDataMap);
    }

    public timPresenceList_args() {
    }

    public timPresenceList_args(
      TimPBeanList pbeanList)
    {
      this();
      this.pbeanList = pbeanList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timPresenceList_args(timPresenceList_args other) {
      if (other.isSetPbeanList()) {
        this.pbeanList = new TimPBeanList(other.pbeanList);
      }
    }

    public timPresenceList_args deepCopy() {
      return new timPresenceList_args(this);
    }

    @Override
    public void clear() {
      this.pbeanList = null;
    }

    public TimPBeanList getPbeanList() {
      return this.pbeanList;
    }

    public timPresenceList_args setPbeanList(TimPBeanList pbeanList) {
      this.pbeanList = pbeanList;
      return this;
    }

    public void unsetPbeanList() {
      this.pbeanList = null;
    }

    /** Returns true if field pbeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetPbeanList() {
      return this.pbeanList != null;
    }

    public void setPbeanListIsSet(boolean value) {
      if (!value) {
        this.pbeanList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBEAN_LIST:
        if (value == null) {
          unsetPbeanList();
        } else {
          setPbeanList((TimPBeanList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBEAN_LIST:
        return getPbeanList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBEAN_LIST:
        return isSetPbeanList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timPresenceList_args)
        return this.equals((timPresenceList_args)that);
      return false;
    }

    public boolean equals(timPresenceList_args that) {
      if (that == null)
        return false;

      boolean this_present_pbeanList = true && this.isSetPbeanList();
      boolean that_present_pbeanList = true && that.isSetPbeanList();
      if (this_present_pbeanList || that_present_pbeanList) {
        if (!(this_present_pbeanList && that_present_pbeanList))
          return false;
        if (!this.pbeanList.equals(that.pbeanList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pbeanList = true && (isSetPbeanList());
      list.add(present_pbeanList);
      if (present_pbeanList)
        list.add(pbeanList);

      return list.hashCode();
    }

    @Override
    public int compareTo(timPresenceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPbeanList()).compareTo(other.isSetPbeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbeanList, other.pbeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timPresenceList_args(");
      boolean first = true;

      sb.append("pbeanList:");
      if (this.pbeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.pbeanList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbeanList != null) {
        pbeanList.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timPresenceList_argsStandardSchemeFactory implements SchemeFactory {
      public timPresenceList_argsStandardScheme getScheme() {
        return new timPresenceList_argsStandardScheme();
      }
    }

    private static class timPresenceList_argsStandardScheme extends StandardScheme<timPresenceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timPresenceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbeanList = new TimPBeanList();
                struct.pbeanList.read(iprot);
                struct.setPbeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timPresenceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbeanList != null) {
          oprot.writeFieldBegin(PBEAN_LIST_FIELD_DESC);
          struct.pbeanList.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timPresenceList_argsTupleSchemeFactory implements SchemeFactory {
      public timPresenceList_argsTupleScheme getScheme() {
        return new timPresenceList_argsTupleScheme();
      }
    }

    private static class timPresenceList_argsTupleScheme extends TupleScheme<timPresenceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timPresenceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbeanList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPbeanList()) {
          struct.pbeanList.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timPresenceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pbeanList = new TimPBeanList();
          struct.pbeanList.read(iprot);
          struct.setPbeanListIsSet(true);
        }
      }
    }

  }

  public static class timMessageIq_args implements org.apache.thrift.TBase<timMessageIq_args, timMessageIq_args._Fields>, java.io.Serializable, Cloneable, Comparable<timMessageIq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timMessageIq_args");

    private static final org.apache.thrift.protocol.TField TIM_MSG_IQ_FIELD_DESC = new org.apache.thrift.protocol.TField("timMsgIq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iqType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timMessageIq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timMessageIq_argsTupleSchemeFactory());
    }

    public TimMessageIq timMsgIq; // required
    public String iqType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIM_MSG_IQ((short)1, "timMsgIq"),
      IQ_TYPE((short)2, "iqType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIM_MSG_IQ
            return TIM_MSG_IQ;
          case 2: // IQ_TYPE
            return IQ_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIM_MSG_IQ, new org.apache.thrift.meta_data.FieldMetaData("timMsgIq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMessageIq.class)));
      tmpMap.put(_Fields.IQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iqType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timMessageIq_args.class, metaDataMap);
    }

    public timMessageIq_args() {
    }

    public timMessageIq_args(
      TimMessageIq timMsgIq,
      String iqType)
    {
      this();
      this.timMsgIq = timMsgIq;
      this.iqType = iqType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timMessageIq_args(timMessageIq_args other) {
      if (other.isSetTimMsgIq()) {
        this.timMsgIq = new TimMessageIq(other.timMsgIq);
      }
      if (other.isSetIqType()) {
        this.iqType = other.iqType;
      }
    }

    public timMessageIq_args deepCopy() {
      return new timMessageIq_args(this);
    }

    @Override
    public void clear() {
      this.timMsgIq = null;
      this.iqType = null;
    }

    public TimMessageIq getTimMsgIq() {
      return this.timMsgIq;
    }

    public timMessageIq_args setTimMsgIq(TimMessageIq timMsgIq) {
      this.timMsgIq = timMsgIq;
      return this;
    }

    public void unsetTimMsgIq() {
      this.timMsgIq = null;
    }

    /** Returns true if field timMsgIq is set (has been assigned a value) and false otherwise */
    public boolean isSetTimMsgIq() {
      return this.timMsgIq != null;
    }

    public void setTimMsgIqIsSet(boolean value) {
      if (!value) {
        this.timMsgIq = null;
      }
    }

    public String getIqType() {
      return this.iqType;
    }

    public timMessageIq_args setIqType(String iqType) {
      this.iqType = iqType;
      return this;
    }

    public void unsetIqType() {
      this.iqType = null;
    }

    /** Returns true if field iqType is set (has been assigned a value) and false otherwise */
    public boolean isSetIqType() {
      return this.iqType != null;
    }

    public void setIqTypeIsSet(boolean value) {
      if (!value) {
        this.iqType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIM_MSG_IQ:
        if (value == null) {
          unsetTimMsgIq();
        } else {
          setTimMsgIq((TimMessageIq)value);
        }
        break;

      case IQ_TYPE:
        if (value == null) {
          unsetIqType();
        } else {
          setIqType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIM_MSG_IQ:
        return getTimMsgIq();

      case IQ_TYPE:
        return getIqType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIM_MSG_IQ:
        return isSetTimMsgIq();
      case IQ_TYPE:
        return isSetIqType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timMessageIq_args)
        return this.equals((timMessageIq_args)that);
      return false;
    }

    public boolean equals(timMessageIq_args that) {
      if (that == null)
        return false;

      boolean this_present_timMsgIq = true && this.isSetTimMsgIq();
      boolean that_present_timMsgIq = true && that.isSetTimMsgIq();
      if (this_present_timMsgIq || that_present_timMsgIq) {
        if (!(this_present_timMsgIq && that_present_timMsgIq))
          return false;
        if (!this.timMsgIq.equals(that.timMsgIq))
          return false;
      }

      boolean this_present_iqType = true && this.isSetIqType();
      boolean that_present_iqType = true && that.isSetIqType();
      if (this_present_iqType || that_present_iqType) {
        if (!(this_present_iqType && that_present_iqType))
          return false;
        if (!this.iqType.equals(that.iqType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_timMsgIq = true && (isSetTimMsgIq());
      list.add(present_timMsgIq);
      if (present_timMsgIq)
        list.add(timMsgIq);

      boolean present_iqType = true && (isSetIqType());
      list.add(present_iqType);
      if (present_iqType)
        list.add(iqType);

      return list.hashCode();
    }

    @Override
    public int compareTo(timMessageIq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTimMsgIq()).compareTo(other.isSetTimMsgIq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimMsgIq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timMsgIq, other.timMsgIq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIqType()).compareTo(other.isSetIqType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIqType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iqType, other.iqType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timMessageIq_args(");
      boolean first = true;

      sb.append("timMsgIq:");
      if (this.timMsgIq == null) {
        sb.append("null");
      } else {
        sb.append(this.timMsgIq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iqType:");
      if (this.iqType == null) {
        sb.append("null");
      } else {
        sb.append(this.iqType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timMsgIq != null) {
        timMsgIq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timMessageIq_argsStandardSchemeFactory implements SchemeFactory {
      public timMessageIq_argsStandardScheme getScheme() {
        return new timMessageIq_argsStandardScheme();
      }
    }

    private static class timMessageIq_argsStandardScheme extends StandardScheme<timMessageIq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timMessageIq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIM_MSG_IQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timMsgIq = new TimMessageIq();
                struct.timMsgIq.read(iprot);
                struct.setTimMsgIqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IQ_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.iqType = iprot.readString();
                struct.setIqTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timMessageIq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.timMsgIq != null) {
          oprot.writeFieldBegin(TIM_MSG_IQ_FIELD_DESC);
          struct.timMsgIq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iqType != null) {
          oprot.writeFieldBegin(IQ_TYPE_FIELD_DESC);
          oprot.writeString(struct.iqType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timMessageIq_argsTupleSchemeFactory implements SchemeFactory {
      public timMessageIq_argsTupleScheme getScheme() {
        return new timMessageIq_argsTupleScheme();
      }
    }

    private static class timMessageIq_argsTupleScheme extends TupleScheme<timMessageIq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timMessageIq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTimMsgIq()) {
          optionals.set(0);
        }
        if (struct.isSetIqType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTimMsgIq()) {
          struct.timMsgIq.write(oprot);
        }
        if (struct.isSetIqType()) {
          oprot.writeString(struct.iqType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timMessageIq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.timMsgIq = new TimMessageIq();
          struct.timMsgIq.read(iprot);
          struct.setTimMsgIqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iqType = iprot.readString();
          struct.setIqTypeIsSet(true);
        }
      }
    }

  }

  public static class timMessageResult_args implements org.apache.thrift.TBase<timMessageResult_args, timMessageResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<timMessageResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timMessageResult_args");

    private static final org.apache.thrift.protocol.TField MBEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("mbean", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timMessageResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timMessageResult_argsTupleSchemeFactory());
    }

    public TimMBean mbean; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MBEAN((short)1, "mbean");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MBEAN
            return MBEAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MBEAN, new org.apache.thrift.meta_data.FieldMetaData("mbean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timMessageResult_args.class, metaDataMap);
    }

    public timMessageResult_args() {
    }

    public timMessageResult_args(
      TimMBean mbean)
    {
      this();
      this.mbean = mbean;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timMessageResult_args(timMessageResult_args other) {
      if (other.isSetMbean()) {
        this.mbean = new TimMBean(other.mbean);
      }
    }

    public timMessageResult_args deepCopy() {
      return new timMessageResult_args(this);
    }

    @Override
    public void clear() {
      this.mbean = null;
    }

    public TimMBean getMbean() {
      return this.mbean;
    }

    public timMessageResult_args setMbean(TimMBean mbean) {
      this.mbean = mbean;
      return this;
    }

    public void unsetMbean() {
      this.mbean = null;
    }

    /** Returns true if field mbean is set (has been assigned a value) and false otherwise */
    public boolean isSetMbean() {
      return this.mbean != null;
    }

    public void setMbeanIsSet(boolean value) {
      if (!value) {
        this.mbean = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MBEAN:
        if (value == null) {
          unsetMbean();
        } else {
          setMbean((TimMBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MBEAN:
        return getMbean();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MBEAN:
        return isSetMbean();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timMessageResult_args)
        return this.equals((timMessageResult_args)that);
      return false;
    }

    public boolean equals(timMessageResult_args that) {
      if (that == null)
        return false;

      boolean this_present_mbean = true && this.isSetMbean();
      boolean that_present_mbean = true && that.isSetMbean();
      if (this_present_mbean || that_present_mbean) {
        if (!(this_present_mbean && that_present_mbean))
          return false;
        if (!this.mbean.equals(that.mbean))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mbean = true && (isSetMbean());
      list.add(present_mbean);
      if (present_mbean)
        list.add(mbean);

      return list.hashCode();
    }

    @Override
    public int compareTo(timMessageResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMbean()).compareTo(other.isSetMbean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbean, other.mbean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timMessageResult_args(");
      boolean first = true;

      sb.append("mbean:");
      if (this.mbean == null) {
        sb.append("null");
      } else {
        sb.append(this.mbean);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbean != null) {
        mbean.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timMessageResult_argsStandardSchemeFactory implements SchemeFactory {
      public timMessageResult_argsStandardScheme getScheme() {
        return new timMessageResult_argsStandardScheme();
      }
    }

    private static class timMessageResult_argsStandardScheme extends StandardScheme<timMessageResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timMessageResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MBEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbean = new TimMBean();
                struct.mbean.read(iprot);
                struct.setMbeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timMessageResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbean != null) {
          oprot.writeFieldBegin(MBEAN_FIELD_DESC);
          struct.mbean.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timMessageResult_argsTupleSchemeFactory implements SchemeFactory {
      public timMessageResult_argsTupleScheme getScheme() {
        return new timMessageResult_argsTupleScheme();
      }
    }

    private static class timMessageResult_argsTupleScheme extends TupleScheme<timMessageResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timMessageResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMbean()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMbean()) {
          struct.mbean.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timMessageResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mbean = new TimMBean();
          struct.mbean.read(iprot);
          struct.setMbeanIsSet(true);
        }
      }
    }

  }

  public static class timProperty_args implements org.apache.thrift.TBase<timProperty_args, timProperty_args._Fields>, java.io.Serializable, Cloneable, Comparable<timProperty_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timProperty_args");

    private static final org.apache.thrift.protocol.TField TPB_FIELD_DESC = new org.apache.thrift.protocol.TField("tpb", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timProperty_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timProperty_argsTupleSchemeFactory());
    }

    public TimPropertyBean tpb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TPB((short)1, "tpb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TPB
            return TPB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TPB, new org.apache.thrift.meta_data.FieldMetaData("tpb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimPropertyBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timProperty_args.class, metaDataMap);
    }

    public timProperty_args() {
    }

    public timProperty_args(
      TimPropertyBean tpb)
    {
      this();
      this.tpb = tpb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timProperty_args(timProperty_args other) {
      if (other.isSetTpb()) {
        this.tpb = new TimPropertyBean(other.tpb);
      }
    }

    public timProperty_args deepCopy() {
      return new timProperty_args(this);
    }

    @Override
    public void clear() {
      this.tpb = null;
    }

    public TimPropertyBean getTpb() {
      return this.tpb;
    }

    public timProperty_args setTpb(TimPropertyBean tpb) {
      this.tpb = tpb;
      return this;
    }

    public void unsetTpb() {
      this.tpb = null;
    }

    /** Returns true if field tpb is set (has been assigned a value) and false otherwise */
    public boolean isSetTpb() {
      return this.tpb != null;
    }

    public void setTpbIsSet(boolean value) {
      if (!value) {
        this.tpb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TPB:
        if (value == null) {
          unsetTpb();
        } else {
          setTpb((TimPropertyBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TPB:
        return getTpb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TPB:
        return isSetTpb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timProperty_args)
        return this.equals((timProperty_args)that);
      return false;
    }

    public boolean equals(timProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_tpb = true && this.isSetTpb();
      boolean that_present_tpb = true && that.isSetTpb();
      if (this_present_tpb || that_present_tpb) {
        if (!(this_present_tpb && that_present_tpb))
          return false;
        if (!this.tpb.equals(that.tpb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tpb = true && (isSetTpb());
      list.add(present_tpb);
      if (present_tpb)
        list.add(tpb);

      return list.hashCode();
    }

    @Override
    public int compareTo(timProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTpb()).compareTo(other.isSetTpb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTpb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpb, other.tpb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timProperty_args(");
      boolean first = true;

      sb.append("tpb:");
      if (this.tpb == null) {
        sb.append("null");
      } else {
        sb.append(this.tpb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tpb != null) {
        tpb.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timProperty_argsStandardSchemeFactory implements SchemeFactory {
      public timProperty_argsStandardScheme getScheme() {
        return new timProperty_argsStandardScheme();
      }
    }

    private static class timProperty_argsStandardScheme extends StandardScheme<timProperty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timProperty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TPB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tpb = new TimPropertyBean();
                struct.tpb.read(iprot);
                struct.setTpbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timProperty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tpb != null) {
          oprot.writeFieldBegin(TPB_FIELD_DESC);
          struct.tpb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timProperty_argsTupleSchemeFactory implements SchemeFactory {
      public timProperty_argsTupleScheme getScheme() {
        return new timProperty_argsTupleScheme();
      }
    }

    private static class timProperty_argsTupleScheme extends TupleScheme<timProperty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTpb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTpb()) {
          struct.tpb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tpb = new TimPropertyBean();
          struct.tpb.read(iprot);
          struct.setTpbIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserAuth_args implements org.apache.thrift.TBase<timRemoteUserAuth_args, timRemoteUserAuth_args._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserAuth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserAuth_args");

    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserAuth_argsTupleSchemeFactory());
    }

    public Tid tid; // required
    public String pwd; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TID((short)1, "tid"),
      PWD((short)2, "pwd"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TID
            return TID;
          case 2: // PWD
            return PWD;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserAuth_args.class, metaDataMap);
    }

    public timRemoteUserAuth_args() {
    }

    public timRemoteUserAuth_args(
      Tid tid,
      String pwd,
      TimAuth auth)
    {
      this();
      this.tid = tid;
      this.pwd = pwd;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserAuth_args(timRemoteUserAuth_args other) {
      if (other.isSetTid()) {
        this.tid = new Tid(other.tid);
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timRemoteUserAuth_args deepCopy() {
      return new timRemoteUserAuth_args(this);
    }

    @Override
    public void clear() {
      this.tid = null;
      this.pwd = null;
      this.auth = null;
    }

    public Tid getTid() {
      return this.tid;
    }

    public timRemoteUserAuth_args setTid(Tid tid) {
      this.tid = tid;
      return this;
    }

    public void unsetTid() {
      this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
      if (!value) {
        this.tid = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public timRemoteUserAuth_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timRemoteUserAuth_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Tid)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TID:
        return getTid();

      case PWD:
        return getPwd();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TID:
        return isSetTid();
      case PWD:
        return isSetPwd();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserAuth_args)
        return this.equals((timRemoteUserAuth_args)that);
      return false;
    }

    public boolean equals(timRemoteUserAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_tid = true && this.isSetTid();
      boolean that_present_tid = true && that.isSetTid();
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (!this.tid.equals(that.tid))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tid = true && (isSetTid());
      list.add(present_tid);
      if (present_tid)
        list.add(tid);

      boolean present_pwd = true && (isSetPwd());
      list.add(present_pwd);
      if (present_pwd)
        list.add(pwd);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserAuth_args(");
      boolean first = true;

      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tid != null) {
        tid.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserAuth_argsStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserAuth_argsStandardScheme getScheme() {
        return new timRemoteUserAuth_argsStandardScheme();
      }
    }

    private static class timRemoteUserAuth_argsStandardScheme extends StandardScheme<timRemoteUserAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tid = new Tid();
                struct.tid.read(iprot);
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tid != null) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserAuth_argsTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserAuth_argsTupleScheme getScheme() {
        return new timRemoteUserAuth_argsTupleScheme();
      }
    }

    private static class timRemoteUserAuth_argsTupleScheme extends TupleScheme<timRemoteUserAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTid()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTid()) {
          struct.tid.write(oprot);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tid = new Tid();
          struct.tid.read(iprot);
          struct.setTidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserAuth_result implements org.apache.thrift.TBase<timRemoteUserAuth_result, timRemoteUserAuth_result._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserAuth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserAuth_resultTupleSchemeFactory());
    }

    public TimRemoteUserBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRemoteUserBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserAuth_result.class, metaDataMap);
    }

    public timRemoteUserAuth_result() {
    }

    public timRemoteUserAuth_result(
      TimRemoteUserBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserAuth_result(timRemoteUserAuth_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimRemoteUserBean(other.success);
      }
    }

    public timRemoteUserAuth_result deepCopy() {
      return new timRemoteUserAuth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimRemoteUserBean getSuccess() {
      return this.success;
    }

    public timRemoteUserAuth_result setSuccess(TimRemoteUserBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimRemoteUserBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserAuth_result)
        return this.equals((timRemoteUserAuth_result)that);
      return false;
    }

    public boolean equals(timRemoteUserAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserAuth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserAuth_resultStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserAuth_resultStandardScheme getScheme() {
        return new timRemoteUserAuth_resultStandardScheme();
      }
    }

    private static class timRemoteUserAuth_resultStandardScheme extends StandardScheme<timRemoteUserAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimRemoteUserBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserAuth_resultTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserAuth_resultTupleScheme getScheme() {
        return new timRemoteUserAuth_resultTupleScheme();
      }
    }

    private static class timRemoteUserAuth_resultTupleScheme extends TupleScheme<timRemoteUserAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimRemoteUserBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserGet_args implements org.apache.thrift.TBase<timRemoteUserGet_args, timRemoteUserGet_args._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserGet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserGet_args");

    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserGet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserGet_argsTupleSchemeFactory());
    }

    public Tid tid; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TID((short)1, "tid"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TID
            return TID;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserGet_args.class, metaDataMap);
    }

    public timRemoteUserGet_args() {
    }

    public timRemoteUserGet_args(
      Tid tid,
      TimAuth auth)
    {
      this();
      this.tid = tid;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserGet_args(timRemoteUserGet_args other) {
      if (other.isSetTid()) {
        this.tid = new Tid(other.tid);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timRemoteUserGet_args deepCopy() {
      return new timRemoteUserGet_args(this);
    }

    @Override
    public void clear() {
      this.tid = null;
      this.auth = null;
    }

    public Tid getTid() {
      return this.tid;
    }

    public timRemoteUserGet_args setTid(Tid tid) {
      this.tid = tid;
      return this;
    }

    public void unsetTid() {
      this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
      if (!value) {
        this.tid = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timRemoteUserGet_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Tid)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TID:
        return getTid();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TID:
        return isSetTid();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserGet_args)
        return this.equals((timRemoteUserGet_args)that);
      return false;
    }

    public boolean equals(timRemoteUserGet_args that) {
      if (that == null)
        return false;

      boolean this_present_tid = true && this.isSetTid();
      boolean that_present_tid = true && that.isSetTid();
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (!this.tid.equals(that.tid))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tid = true && (isSetTid());
      list.add(present_tid);
      if (present_tid)
        list.add(tid);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserGet_args(");
      boolean first = true;

      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tid != null) {
        tid.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserGet_argsStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserGet_argsStandardScheme getScheme() {
        return new timRemoteUserGet_argsStandardScheme();
      }
    }

    private static class timRemoteUserGet_argsStandardScheme extends StandardScheme<timRemoteUserGet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserGet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tid = new Tid();
                struct.tid.read(iprot);
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserGet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tid != null) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserGet_argsTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserGet_argsTupleScheme getScheme() {
        return new timRemoteUserGet_argsTupleScheme();
      }
    }

    private static class timRemoteUserGet_argsTupleScheme extends TupleScheme<timRemoteUserGet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTid()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTid()) {
          struct.tid.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserGet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tid = new Tid();
          struct.tid.read(iprot);
          struct.setTidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserGet_result implements org.apache.thrift.TBase<timRemoteUserGet_result, timRemoteUserGet_result._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserGet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserGet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserGet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserGet_resultTupleSchemeFactory());
    }

    public TimRemoteUserBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRemoteUserBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserGet_result.class, metaDataMap);
    }

    public timRemoteUserGet_result() {
    }

    public timRemoteUserGet_result(
      TimRemoteUserBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserGet_result(timRemoteUserGet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimRemoteUserBean(other.success);
      }
    }

    public timRemoteUserGet_result deepCopy() {
      return new timRemoteUserGet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimRemoteUserBean getSuccess() {
      return this.success;
    }

    public timRemoteUserGet_result setSuccess(TimRemoteUserBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimRemoteUserBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserGet_result)
        return this.equals((timRemoteUserGet_result)that);
      return false;
    }

    public boolean equals(timRemoteUserGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserGet_resultStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserGet_resultStandardScheme getScheme() {
        return new timRemoteUserGet_resultStandardScheme();
      }
    }

    private static class timRemoteUserGet_resultStandardScheme extends StandardScheme<timRemoteUserGet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserGet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimRemoteUserBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserGet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserGet_resultTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserGet_resultTupleScheme getScheme() {
        return new timRemoteUserGet_resultTupleScheme();
      }
    }

    private static class timRemoteUserGet_resultTupleScheme extends TupleScheme<timRemoteUserGet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserGet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimRemoteUserBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserEdit_args implements org.apache.thrift.TBase<timRemoteUserEdit_args, timRemoteUserEdit_args._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserEdit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserEdit_args");

    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UB_FIELD_DESC = new org.apache.thrift.protocol.TField("ub", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserEdit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserEdit_argsTupleSchemeFactory());
    }

    public Tid tid; // required
    public TimUserBean ub; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TID((short)1, "tid"),
      UB((short)2, "ub"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TID
            return TID;
          case 2: // UB
            return UB;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
      tmpMap.put(_Fields.UB, new org.apache.thrift.meta_data.FieldMetaData("ub", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimUserBean.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserEdit_args.class, metaDataMap);
    }

    public timRemoteUserEdit_args() {
    }

    public timRemoteUserEdit_args(
      Tid tid,
      TimUserBean ub,
      TimAuth auth)
    {
      this();
      this.tid = tid;
      this.ub = ub;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserEdit_args(timRemoteUserEdit_args other) {
      if (other.isSetTid()) {
        this.tid = new Tid(other.tid);
      }
      if (other.isSetUb()) {
        this.ub = new TimUserBean(other.ub);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timRemoteUserEdit_args deepCopy() {
      return new timRemoteUserEdit_args(this);
    }

    @Override
    public void clear() {
      this.tid = null;
      this.ub = null;
      this.auth = null;
    }

    public Tid getTid() {
      return this.tid;
    }

    public timRemoteUserEdit_args setTid(Tid tid) {
      this.tid = tid;
      return this;
    }

    public void unsetTid() {
      this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
      if (!value) {
        this.tid = null;
      }
    }

    public TimUserBean getUb() {
      return this.ub;
    }

    public timRemoteUserEdit_args setUb(TimUserBean ub) {
      this.ub = ub;
      return this;
    }

    public void unsetUb() {
      this.ub = null;
    }

    /** Returns true if field ub is set (has been assigned a value) and false otherwise */
    public boolean isSetUb() {
      return this.ub != null;
    }

    public void setUbIsSet(boolean value) {
      if (!value) {
        this.ub = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timRemoteUserEdit_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Tid)value);
        }
        break;

      case UB:
        if (value == null) {
          unsetUb();
        } else {
          setUb((TimUserBean)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TID:
        return getTid();

      case UB:
        return getUb();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TID:
        return isSetTid();
      case UB:
        return isSetUb();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserEdit_args)
        return this.equals((timRemoteUserEdit_args)that);
      return false;
    }

    public boolean equals(timRemoteUserEdit_args that) {
      if (that == null)
        return false;

      boolean this_present_tid = true && this.isSetTid();
      boolean that_present_tid = true && that.isSetTid();
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (!this.tid.equals(that.tid))
          return false;
      }

      boolean this_present_ub = true && this.isSetUb();
      boolean that_present_ub = true && that.isSetUb();
      if (this_present_ub || that_present_ub) {
        if (!(this_present_ub && that_present_ub))
          return false;
        if (!this.ub.equals(that.ub))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tid = true && (isSetTid());
      list.add(present_tid);
      if (present_tid)
        list.add(tid);

      boolean present_ub = true && (isSetUb());
      list.add(present_ub);
      if (present_ub)
        list.add(ub);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserEdit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUb()).compareTo(other.isSetUb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ub, other.ub);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserEdit_args(");
      boolean first = true;

      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ub:");
      if (this.ub == null) {
        sb.append("null");
      } else {
        sb.append(this.ub);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tid != null) {
        tid.validate();
      }
      if (ub != null) {
        ub.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserEdit_argsStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserEdit_argsStandardScheme getScheme() {
        return new timRemoteUserEdit_argsStandardScheme();
      }
    }

    private static class timRemoteUserEdit_argsStandardScheme extends StandardScheme<timRemoteUserEdit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserEdit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tid = new Tid();
                struct.tid.read(iprot);
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ub = new TimUserBean();
                struct.ub.read(iprot);
                struct.setUbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserEdit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tid != null) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ub != null) {
          oprot.writeFieldBegin(UB_FIELD_DESC);
          struct.ub.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserEdit_argsTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserEdit_argsTupleScheme getScheme() {
        return new timRemoteUserEdit_argsTupleScheme();
      }
    }

    private static class timRemoteUserEdit_argsTupleScheme extends TupleScheme<timRemoteUserEdit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTid()) {
          optionals.set(0);
        }
        if (struct.isSetUb()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTid()) {
          struct.tid.write(oprot);
        }
        if (struct.isSetUb()) {
          struct.ub.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tid = new Tid();
          struct.tid.read(iprot);
          struct.setTidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ub = new TimUserBean();
          struct.ub.read(iprot);
          struct.setUbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timRemoteUserEdit_result implements org.apache.thrift.TBase<timRemoteUserEdit_result, timRemoteUserEdit_result._Fields>, java.io.Serializable, Cloneable, Comparable<timRemoteUserEdit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timRemoteUserEdit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timRemoteUserEdit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timRemoteUserEdit_resultTupleSchemeFactory());
    }

    public TimRemoteUserBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRemoteUserBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timRemoteUserEdit_result.class, metaDataMap);
    }

    public timRemoteUserEdit_result() {
    }

    public timRemoteUserEdit_result(
      TimRemoteUserBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timRemoteUserEdit_result(timRemoteUserEdit_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimRemoteUserBean(other.success);
      }
    }

    public timRemoteUserEdit_result deepCopy() {
      return new timRemoteUserEdit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimRemoteUserBean getSuccess() {
      return this.success;
    }

    public timRemoteUserEdit_result setSuccess(TimRemoteUserBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimRemoteUserBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timRemoteUserEdit_result)
        return this.equals((timRemoteUserEdit_result)that);
      return false;
    }

    public boolean equals(timRemoteUserEdit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timRemoteUserEdit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timRemoteUserEdit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timRemoteUserEdit_resultStandardSchemeFactory implements SchemeFactory {
      public timRemoteUserEdit_resultStandardScheme getScheme() {
        return new timRemoteUserEdit_resultStandardScheme();
      }
    }

    private static class timRemoteUserEdit_resultStandardScheme extends StandardScheme<timRemoteUserEdit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timRemoteUserEdit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimRemoteUserBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timRemoteUserEdit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timRemoteUserEdit_resultTupleSchemeFactory implements SchemeFactory {
      public timRemoteUserEdit_resultTupleScheme getScheme() {
        return new timRemoteUserEdit_resultTupleScheme();
      }
    }

    private static class timRemoteUserEdit_resultTupleScheme extends TupleScheme<timRemoteUserEdit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timRemoteUserEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timRemoteUserEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimRemoteUserBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timResponsePresence_args implements org.apache.thrift.TBase<timResponsePresence_args, timResponsePresence_args._Fields>, java.io.Serializable, Cloneable, Comparable<timResponsePresence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponsePresence_args");

    private static final org.apache.thrift.protocol.TField PBEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("pbean", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponsePresence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponsePresence_argsTupleSchemeFactory());
    }

    public TimPBean pbean; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBEAN((short)1, "pbean"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBEAN
            return PBEAN;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBEAN, new org.apache.thrift.meta_data.FieldMetaData("pbean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimPBean.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponsePresence_args.class, metaDataMap);
    }

    public timResponsePresence_args() {
    }

    public timResponsePresence_args(
      TimPBean pbean,
      TimAuth auth)
    {
      this();
      this.pbean = pbean;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponsePresence_args(timResponsePresence_args other) {
      if (other.isSetPbean()) {
        this.pbean = new TimPBean(other.pbean);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timResponsePresence_args deepCopy() {
      return new timResponsePresence_args(this);
    }

    @Override
    public void clear() {
      this.pbean = null;
      this.auth = null;
    }

    public TimPBean getPbean() {
      return this.pbean;
    }

    public timResponsePresence_args setPbean(TimPBean pbean) {
      this.pbean = pbean;
      return this;
    }

    public void unsetPbean() {
      this.pbean = null;
    }

    /** Returns true if field pbean is set (has been assigned a value) and false otherwise */
    public boolean isSetPbean() {
      return this.pbean != null;
    }

    public void setPbeanIsSet(boolean value) {
      if (!value) {
        this.pbean = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timResponsePresence_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBEAN:
        if (value == null) {
          unsetPbean();
        } else {
          setPbean((TimPBean)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBEAN:
        return getPbean();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBEAN:
        return isSetPbean();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponsePresence_args)
        return this.equals((timResponsePresence_args)that);
      return false;
    }

    public boolean equals(timResponsePresence_args that) {
      if (that == null)
        return false;

      boolean this_present_pbean = true && this.isSetPbean();
      boolean that_present_pbean = true && that.isSetPbean();
      if (this_present_pbean || that_present_pbean) {
        if (!(this_present_pbean && that_present_pbean))
          return false;
        if (!this.pbean.equals(that.pbean))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pbean = true && (isSetPbean());
      list.add(present_pbean);
      if (present_pbean)
        list.add(pbean);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponsePresence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPbean()).compareTo(other.isSetPbean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbean, other.pbean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponsePresence_args(");
      boolean first = true;

      sb.append("pbean:");
      if (this.pbean == null) {
        sb.append("null");
      } else {
        sb.append(this.pbean);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbean != null) {
        pbean.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponsePresence_argsStandardSchemeFactory implements SchemeFactory {
      public timResponsePresence_argsStandardScheme getScheme() {
        return new timResponsePresence_argsStandardScheme();
      }
    }

    private static class timResponsePresence_argsStandardScheme extends StandardScheme<timResponsePresence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponsePresence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbean = new TimPBean();
                struct.pbean.read(iprot);
                struct.setPbeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponsePresence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbean != null) {
          oprot.writeFieldBegin(PBEAN_FIELD_DESC);
          struct.pbean.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponsePresence_argsTupleSchemeFactory implements SchemeFactory {
      public timResponsePresence_argsTupleScheme getScheme() {
        return new timResponsePresence_argsTupleScheme();
      }
    }

    private static class timResponsePresence_argsTupleScheme extends TupleScheme<timResponsePresence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponsePresence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbean()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPbean()) {
          struct.pbean.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponsePresence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pbean = new TimPBean();
          struct.pbean.read(iprot);
          struct.setPbeanIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timResponsePresence_result implements org.apache.thrift.TBase<timResponsePresence_result, timResponsePresence_result._Fields>, java.io.Serializable, Cloneable, Comparable<timResponsePresence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponsePresence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponsePresence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponsePresence_resultTupleSchemeFactory());
    }

    public TimResponseBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimResponseBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponsePresence_result.class, metaDataMap);
    }

    public timResponsePresence_result() {
    }

    public timResponsePresence_result(
      TimResponseBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponsePresence_result(timResponsePresence_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimResponseBean(other.success);
      }
    }

    public timResponsePresence_result deepCopy() {
      return new timResponsePresence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimResponseBean getSuccess() {
      return this.success;
    }

    public timResponsePresence_result setSuccess(TimResponseBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimResponseBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponsePresence_result)
        return this.equals((timResponsePresence_result)that);
      return false;
    }

    public boolean equals(timResponsePresence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponsePresence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponsePresence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponsePresence_resultStandardSchemeFactory implements SchemeFactory {
      public timResponsePresence_resultStandardScheme getScheme() {
        return new timResponsePresence_resultStandardScheme();
      }
    }

    private static class timResponsePresence_resultStandardScheme extends StandardScheme<timResponsePresence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponsePresence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimResponseBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponsePresence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponsePresence_resultTupleSchemeFactory implements SchemeFactory {
      public timResponsePresence_resultTupleScheme getScheme() {
        return new timResponsePresence_resultTupleScheme();
      }
    }

    private static class timResponsePresence_resultTupleScheme extends TupleScheme<timResponsePresence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponsePresence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponsePresence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimResponseBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessage_args implements org.apache.thrift.TBase<timResponseMessage_args, timResponseMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessage_args");

    private static final org.apache.thrift.protocol.TField MBEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("mbean", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessage_argsTupleSchemeFactory());
    }

    public TimMBean mbean; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MBEAN((short)1, "mbean"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MBEAN
            return MBEAN;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MBEAN, new org.apache.thrift.meta_data.FieldMetaData("mbean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBean.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessage_args.class, metaDataMap);
    }

    public timResponseMessage_args() {
    }

    public timResponseMessage_args(
      TimMBean mbean,
      TimAuth auth)
    {
      this();
      this.mbean = mbean;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessage_args(timResponseMessage_args other) {
      if (other.isSetMbean()) {
        this.mbean = new TimMBean(other.mbean);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timResponseMessage_args deepCopy() {
      return new timResponseMessage_args(this);
    }

    @Override
    public void clear() {
      this.mbean = null;
      this.auth = null;
    }

    public TimMBean getMbean() {
      return this.mbean;
    }

    public timResponseMessage_args setMbean(TimMBean mbean) {
      this.mbean = mbean;
      return this;
    }

    public void unsetMbean() {
      this.mbean = null;
    }

    /** Returns true if field mbean is set (has been assigned a value) and false otherwise */
    public boolean isSetMbean() {
      return this.mbean != null;
    }

    public void setMbeanIsSet(boolean value) {
      if (!value) {
        this.mbean = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timResponseMessage_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MBEAN:
        if (value == null) {
          unsetMbean();
        } else {
          setMbean((TimMBean)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MBEAN:
        return getMbean();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MBEAN:
        return isSetMbean();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessage_args)
        return this.equals((timResponseMessage_args)that);
      return false;
    }

    public boolean equals(timResponseMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_mbean = true && this.isSetMbean();
      boolean that_present_mbean = true && that.isSetMbean();
      if (this_present_mbean || that_present_mbean) {
        if (!(this_present_mbean && that_present_mbean))
          return false;
        if (!this.mbean.equals(that.mbean))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mbean = true && (isSetMbean());
      list.add(present_mbean);
      if (present_mbean)
        list.add(mbean);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMbean()).compareTo(other.isSetMbean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbean, other.mbean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessage_args(");
      boolean first = true;

      sb.append("mbean:");
      if (this.mbean == null) {
        sb.append("null");
      } else {
        sb.append(this.mbean);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbean != null) {
        mbean.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessage_argsStandardSchemeFactory implements SchemeFactory {
      public timResponseMessage_argsStandardScheme getScheme() {
        return new timResponseMessage_argsStandardScheme();
      }
    }

    private static class timResponseMessage_argsStandardScheme extends StandardScheme<timResponseMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MBEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbean = new TimMBean();
                struct.mbean.read(iprot);
                struct.setMbeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbean != null) {
          oprot.writeFieldBegin(MBEAN_FIELD_DESC);
          struct.mbean.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessage_argsTupleSchemeFactory implements SchemeFactory {
      public timResponseMessage_argsTupleScheme getScheme() {
        return new timResponseMessage_argsTupleScheme();
      }
    }

    private static class timResponseMessage_argsTupleScheme extends TupleScheme<timResponseMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMbean()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMbean()) {
          struct.mbean.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mbean = new TimMBean();
          struct.mbean.read(iprot);
          struct.setMbeanIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessage_result implements org.apache.thrift.TBase<timResponseMessage_result, timResponseMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessage_resultTupleSchemeFactory());
    }

    public TimResponseBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimResponseBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessage_result.class, metaDataMap);
    }

    public timResponseMessage_result() {
    }

    public timResponseMessage_result(
      TimResponseBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessage_result(timResponseMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimResponseBean(other.success);
      }
    }

    public timResponseMessage_result deepCopy() {
      return new timResponseMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimResponseBean getSuccess() {
      return this.success;
    }

    public timResponseMessage_result setSuccess(TimResponseBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimResponseBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessage_result)
        return this.equals((timResponseMessage_result)that);
      return false;
    }

    public boolean equals(timResponseMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessage_resultStandardSchemeFactory implements SchemeFactory {
      public timResponseMessage_resultStandardScheme getScheme() {
        return new timResponseMessage_resultStandardScheme();
      }
    }

    private static class timResponseMessage_resultStandardScheme extends StandardScheme<timResponseMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimResponseBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessage_resultTupleSchemeFactory implements SchemeFactory {
      public timResponseMessage_resultTupleScheme getScheme() {
        return new timResponseMessage_resultTupleScheme();
      }
    }

    private static class timResponseMessage_resultTupleScheme extends TupleScheme<timResponseMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimResponseBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessageIq_args implements org.apache.thrift.TBase<timResponseMessageIq_args, timResponseMessageIq_args._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessageIq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessageIq_args");

    private static final org.apache.thrift.protocol.TField TIM_MSG_IQ_FIELD_DESC = new org.apache.thrift.protocol.TField("timMsgIq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iqType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessageIq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessageIq_argsTupleSchemeFactory());
    }

    public TimMessageIq timMsgIq; // required
    public String iqType; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIM_MSG_IQ((short)1, "timMsgIq"),
      IQ_TYPE((short)2, "iqType"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIM_MSG_IQ
            return TIM_MSG_IQ;
          case 2: // IQ_TYPE
            return IQ_TYPE;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIM_MSG_IQ, new org.apache.thrift.meta_data.FieldMetaData("timMsgIq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMessageIq.class)));
      tmpMap.put(_Fields.IQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iqType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessageIq_args.class, metaDataMap);
    }

    public timResponseMessageIq_args() {
    }

    public timResponseMessageIq_args(
      TimMessageIq timMsgIq,
      String iqType,
      TimAuth auth)
    {
      this();
      this.timMsgIq = timMsgIq;
      this.iqType = iqType;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessageIq_args(timResponseMessageIq_args other) {
      if (other.isSetTimMsgIq()) {
        this.timMsgIq = new TimMessageIq(other.timMsgIq);
      }
      if (other.isSetIqType()) {
        this.iqType = other.iqType;
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timResponseMessageIq_args deepCopy() {
      return new timResponseMessageIq_args(this);
    }

    @Override
    public void clear() {
      this.timMsgIq = null;
      this.iqType = null;
      this.auth = null;
    }

    public TimMessageIq getTimMsgIq() {
      return this.timMsgIq;
    }

    public timResponseMessageIq_args setTimMsgIq(TimMessageIq timMsgIq) {
      this.timMsgIq = timMsgIq;
      return this;
    }

    public void unsetTimMsgIq() {
      this.timMsgIq = null;
    }

    /** Returns true if field timMsgIq is set (has been assigned a value) and false otherwise */
    public boolean isSetTimMsgIq() {
      return this.timMsgIq != null;
    }

    public void setTimMsgIqIsSet(boolean value) {
      if (!value) {
        this.timMsgIq = null;
      }
    }

    public String getIqType() {
      return this.iqType;
    }

    public timResponseMessageIq_args setIqType(String iqType) {
      this.iqType = iqType;
      return this;
    }

    public void unsetIqType() {
      this.iqType = null;
    }

    /** Returns true if field iqType is set (has been assigned a value) and false otherwise */
    public boolean isSetIqType() {
      return this.iqType != null;
    }

    public void setIqTypeIsSet(boolean value) {
      if (!value) {
        this.iqType = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timResponseMessageIq_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIM_MSG_IQ:
        if (value == null) {
          unsetTimMsgIq();
        } else {
          setTimMsgIq((TimMessageIq)value);
        }
        break;

      case IQ_TYPE:
        if (value == null) {
          unsetIqType();
        } else {
          setIqType((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIM_MSG_IQ:
        return getTimMsgIq();

      case IQ_TYPE:
        return getIqType();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIM_MSG_IQ:
        return isSetTimMsgIq();
      case IQ_TYPE:
        return isSetIqType();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessageIq_args)
        return this.equals((timResponseMessageIq_args)that);
      return false;
    }

    public boolean equals(timResponseMessageIq_args that) {
      if (that == null)
        return false;

      boolean this_present_timMsgIq = true && this.isSetTimMsgIq();
      boolean that_present_timMsgIq = true && that.isSetTimMsgIq();
      if (this_present_timMsgIq || that_present_timMsgIq) {
        if (!(this_present_timMsgIq && that_present_timMsgIq))
          return false;
        if (!this.timMsgIq.equals(that.timMsgIq))
          return false;
      }

      boolean this_present_iqType = true && this.isSetIqType();
      boolean that_present_iqType = true && that.isSetIqType();
      if (this_present_iqType || that_present_iqType) {
        if (!(this_present_iqType && that_present_iqType))
          return false;
        if (!this.iqType.equals(that.iqType))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_timMsgIq = true && (isSetTimMsgIq());
      list.add(present_timMsgIq);
      if (present_timMsgIq)
        list.add(timMsgIq);

      boolean present_iqType = true && (isSetIqType());
      list.add(present_iqType);
      if (present_iqType)
        list.add(iqType);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessageIq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTimMsgIq()).compareTo(other.isSetTimMsgIq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimMsgIq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timMsgIq, other.timMsgIq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIqType()).compareTo(other.isSetIqType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIqType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iqType, other.iqType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessageIq_args(");
      boolean first = true;

      sb.append("timMsgIq:");
      if (this.timMsgIq == null) {
        sb.append("null");
      } else {
        sb.append(this.timMsgIq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iqType:");
      if (this.iqType == null) {
        sb.append("null");
      } else {
        sb.append(this.iqType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timMsgIq != null) {
        timMsgIq.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessageIq_argsStandardSchemeFactory implements SchemeFactory {
      public timResponseMessageIq_argsStandardScheme getScheme() {
        return new timResponseMessageIq_argsStandardScheme();
      }
    }

    private static class timResponseMessageIq_argsStandardScheme extends StandardScheme<timResponseMessageIq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessageIq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIM_MSG_IQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timMsgIq = new TimMessageIq();
                struct.timMsgIq.read(iprot);
                struct.setTimMsgIqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IQ_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.iqType = iprot.readString();
                struct.setIqTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessageIq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.timMsgIq != null) {
          oprot.writeFieldBegin(TIM_MSG_IQ_FIELD_DESC);
          struct.timMsgIq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iqType != null) {
          oprot.writeFieldBegin(IQ_TYPE_FIELD_DESC);
          oprot.writeString(struct.iqType);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessageIq_argsTupleSchemeFactory implements SchemeFactory {
      public timResponseMessageIq_argsTupleScheme getScheme() {
        return new timResponseMessageIq_argsTupleScheme();
      }
    }

    private static class timResponseMessageIq_argsTupleScheme extends TupleScheme<timResponseMessageIq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessageIq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTimMsgIq()) {
          optionals.set(0);
        }
        if (struct.isSetIqType()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTimMsgIq()) {
          struct.timMsgIq.write(oprot);
        }
        if (struct.isSetIqType()) {
          oprot.writeString(struct.iqType);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessageIq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.timMsgIq = new TimMessageIq();
          struct.timMsgIq.read(iprot);
          struct.setTimMsgIqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iqType = iprot.readString();
          struct.setIqTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessageIq_result implements org.apache.thrift.TBase<timResponseMessageIq_result, timResponseMessageIq_result._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessageIq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessageIq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessageIq_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessageIq_resultTupleSchemeFactory());
    }

    public TimMBeanList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBeanList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessageIq_result.class, metaDataMap);
    }

    public timResponseMessageIq_result() {
    }

    public timResponseMessageIq_result(
      TimMBeanList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessageIq_result(timResponseMessageIq_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimMBeanList(other.success);
      }
    }

    public timResponseMessageIq_result deepCopy() {
      return new timResponseMessageIq_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimMBeanList getSuccess() {
      return this.success;
    }

    public timResponseMessageIq_result setSuccess(TimMBeanList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimMBeanList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessageIq_result)
        return this.equals((timResponseMessageIq_result)that);
      return false;
    }

    public boolean equals(timResponseMessageIq_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessageIq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessageIq_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessageIq_resultStandardSchemeFactory implements SchemeFactory {
      public timResponseMessageIq_resultStandardScheme getScheme() {
        return new timResponseMessageIq_resultStandardScheme();
      }
    }

    private static class timResponseMessageIq_resultStandardScheme extends StandardScheme<timResponseMessageIq_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessageIq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimMBeanList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessageIq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessageIq_resultTupleSchemeFactory implements SchemeFactory {
      public timResponseMessageIq_resultTupleScheme getScheme() {
        return new timResponseMessageIq_resultTupleScheme();
      }
    }

    private static class timResponseMessageIq_resultTupleScheme extends TupleScheme<timResponseMessageIq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessageIq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessageIq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimMBeanList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timResponsePresenceList_args implements org.apache.thrift.TBase<timResponsePresenceList_args, timResponsePresenceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<timResponsePresenceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponsePresenceList_args");

    private static final org.apache.thrift.protocol.TField PBEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pbeanList", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponsePresenceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponsePresenceList_argsTupleSchemeFactory());
    }

    public TimPBeanList pbeanList; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBEAN_LIST((short)1, "pbeanList"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBEAN_LIST
            return PBEAN_LIST;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("pbeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimPBeanList.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponsePresenceList_args.class, metaDataMap);
    }

    public timResponsePresenceList_args() {
    }

    public timResponsePresenceList_args(
      TimPBeanList pbeanList,
      TimAuth auth)
    {
      this();
      this.pbeanList = pbeanList;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponsePresenceList_args(timResponsePresenceList_args other) {
      if (other.isSetPbeanList()) {
        this.pbeanList = new TimPBeanList(other.pbeanList);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timResponsePresenceList_args deepCopy() {
      return new timResponsePresenceList_args(this);
    }

    @Override
    public void clear() {
      this.pbeanList = null;
      this.auth = null;
    }

    public TimPBeanList getPbeanList() {
      return this.pbeanList;
    }

    public timResponsePresenceList_args setPbeanList(TimPBeanList pbeanList) {
      this.pbeanList = pbeanList;
      return this;
    }

    public void unsetPbeanList() {
      this.pbeanList = null;
    }

    /** Returns true if field pbeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetPbeanList() {
      return this.pbeanList != null;
    }

    public void setPbeanListIsSet(boolean value) {
      if (!value) {
        this.pbeanList = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timResponsePresenceList_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBEAN_LIST:
        if (value == null) {
          unsetPbeanList();
        } else {
          setPbeanList((TimPBeanList)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBEAN_LIST:
        return getPbeanList();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBEAN_LIST:
        return isSetPbeanList();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponsePresenceList_args)
        return this.equals((timResponsePresenceList_args)that);
      return false;
    }

    public boolean equals(timResponsePresenceList_args that) {
      if (that == null)
        return false;

      boolean this_present_pbeanList = true && this.isSetPbeanList();
      boolean that_present_pbeanList = true && that.isSetPbeanList();
      if (this_present_pbeanList || that_present_pbeanList) {
        if (!(this_present_pbeanList && that_present_pbeanList))
          return false;
        if (!this.pbeanList.equals(that.pbeanList))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pbeanList = true && (isSetPbeanList());
      list.add(present_pbeanList);
      if (present_pbeanList)
        list.add(pbeanList);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponsePresenceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPbeanList()).compareTo(other.isSetPbeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbeanList, other.pbeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponsePresenceList_args(");
      boolean first = true;

      sb.append("pbeanList:");
      if (this.pbeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.pbeanList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbeanList != null) {
        pbeanList.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponsePresenceList_argsStandardSchemeFactory implements SchemeFactory {
      public timResponsePresenceList_argsStandardScheme getScheme() {
        return new timResponsePresenceList_argsStandardScheme();
      }
    }

    private static class timResponsePresenceList_argsStandardScheme extends StandardScheme<timResponsePresenceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponsePresenceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbeanList = new TimPBeanList();
                struct.pbeanList.read(iprot);
                struct.setPbeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponsePresenceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbeanList != null) {
          oprot.writeFieldBegin(PBEAN_LIST_FIELD_DESC);
          struct.pbeanList.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponsePresenceList_argsTupleSchemeFactory implements SchemeFactory {
      public timResponsePresenceList_argsTupleScheme getScheme() {
        return new timResponsePresenceList_argsTupleScheme();
      }
    }

    private static class timResponsePresenceList_argsTupleScheme extends TupleScheme<timResponsePresenceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponsePresenceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbeanList()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPbeanList()) {
          struct.pbeanList.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponsePresenceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pbeanList = new TimPBeanList();
          struct.pbeanList.read(iprot);
          struct.setPbeanListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timResponsePresenceList_result implements org.apache.thrift.TBase<timResponsePresenceList_result, timResponsePresenceList_result._Fields>, java.io.Serializable, Cloneable, Comparable<timResponsePresenceList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponsePresenceList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponsePresenceList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponsePresenceList_resultTupleSchemeFactory());
    }

    public TimResponseBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimResponseBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponsePresenceList_result.class, metaDataMap);
    }

    public timResponsePresenceList_result() {
    }

    public timResponsePresenceList_result(
      TimResponseBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponsePresenceList_result(timResponsePresenceList_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimResponseBean(other.success);
      }
    }

    public timResponsePresenceList_result deepCopy() {
      return new timResponsePresenceList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimResponseBean getSuccess() {
      return this.success;
    }

    public timResponsePresenceList_result setSuccess(TimResponseBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimResponseBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponsePresenceList_result)
        return this.equals((timResponsePresenceList_result)that);
      return false;
    }

    public boolean equals(timResponsePresenceList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponsePresenceList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponsePresenceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponsePresenceList_resultStandardSchemeFactory implements SchemeFactory {
      public timResponsePresenceList_resultStandardScheme getScheme() {
        return new timResponsePresenceList_resultStandardScheme();
      }
    }

    private static class timResponsePresenceList_resultStandardScheme extends StandardScheme<timResponsePresenceList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponsePresenceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimResponseBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponsePresenceList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponsePresenceList_resultTupleSchemeFactory implements SchemeFactory {
      public timResponsePresenceList_resultTupleScheme getScheme() {
        return new timResponsePresenceList_resultTupleScheme();
      }
    }

    private static class timResponsePresenceList_resultTupleScheme extends TupleScheme<timResponsePresenceList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponsePresenceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponsePresenceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimResponseBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessageList_args implements org.apache.thrift.TBase<timResponseMessageList_args, timResponseMessageList_args._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessageList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessageList_args");

    private static final org.apache.thrift.protocol.TField MBEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mbeanList", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessageList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessageList_argsTupleSchemeFactory());
    }

    public TimMBeanList mbeanList; // required
    public TimAuth auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MBEAN_LIST((short)1, "mbeanList"),
      AUTH((short)2, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MBEAN_LIST
            return MBEAN_LIST;
          case 2: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MBEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("mbeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimMBeanList.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimAuth.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessageList_args.class, metaDataMap);
    }

    public timResponseMessageList_args() {
    }

    public timResponseMessageList_args(
      TimMBeanList mbeanList,
      TimAuth auth)
    {
      this();
      this.mbeanList = mbeanList;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessageList_args(timResponseMessageList_args other) {
      if (other.isSetMbeanList()) {
        this.mbeanList = new TimMBeanList(other.mbeanList);
      }
      if (other.isSetAuth()) {
        this.auth = new TimAuth(other.auth);
      }
    }

    public timResponseMessageList_args deepCopy() {
      return new timResponseMessageList_args(this);
    }

    @Override
    public void clear() {
      this.mbeanList = null;
      this.auth = null;
    }

    public TimMBeanList getMbeanList() {
      return this.mbeanList;
    }

    public timResponseMessageList_args setMbeanList(TimMBeanList mbeanList) {
      this.mbeanList = mbeanList;
      return this;
    }

    public void unsetMbeanList() {
      this.mbeanList = null;
    }

    /** Returns true if field mbeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetMbeanList() {
      return this.mbeanList != null;
    }

    public void setMbeanListIsSet(boolean value) {
      if (!value) {
        this.mbeanList = null;
      }
    }

    public TimAuth getAuth() {
      return this.auth;
    }

    public timResponseMessageList_args setAuth(TimAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MBEAN_LIST:
        if (value == null) {
          unsetMbeanList();
        } else {
          setMbeanList((TimMBeanList)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((TimAuth)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MBEAN_LIST:
        return getMbeanList();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MBEAN_LIST:
        return isSetMbeanList();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessageList_args)
        return this.equals((timResponseMessageList_args)that);
      return false;
    }

    public boolean equals(timResponseMessageList_args that) {
      if (that == null)
        return false;

      boolean this_present_mbeanList = true && this.isSetMbeanList();
      boolean that_present_mbeanList = true && that.isSetMbeanList();
      if (this_present_mbeanList || that_present_mbeanList) {
        if (!(this_present_mbeanList && that_present_mbeanList))
          return false;
        if (!this.mbeanList.equals(that.mbeanList))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mbeanList = true && (isSetMbeanList());
      list.add(present_mbeanList);
      if (present_mbeanList)
        list.add(mbeanList);

      boolean present_auth = true && (isSetAuth());
      list.add(present_auth);
      if (present_auth)
        list.add(auth);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessageList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMbeanList()).compareTo(other.isSetMbeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbeanList, other.mbeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessageList_args(");
      boolean first = true;

      sb.append("mbeanList:");
      if (this.mbeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.mbeanList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbeanList != null) {
        mbeanList.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessageList_argsStandardSchemeFactory implements SchemeFactory {
      public timResponseMessageList_argsStandardScheme getScheme() {
        return new timResponseMessageList_argsStandardScheme();
      }
    }

    private static class timResponseMessageList_argsStandardScheme extends StandardScheme<timResponseMessageList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessageList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MBEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbeanList = new TimMBeanList();
                struct.mbeanList.read(iprot);
                struct.setMbeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new TimAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessageList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbeanList != null) {
          oprot.writeFieldBegin(MBEAN_LIST_FIELD_DESC);
          struct.mbeanList.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessageList_argsTupleSchemeFactory implements SchemeFactory {
      public timResponseMessageList_argsTupleScheme getScheme() {
        return new timResponseMessageList_argsTupleScheme();
      }
    }

    private static class timResponseMessageList_argsTupleScheme extends TupleScheme<timResponseMessageList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMbeanList()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMbeanList()) {
          struct.mbeanList.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mbeanList = new TimMBeanList();
          struct.mbeanList.read(iprot);
          struct.setMbeanListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new TimAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class timResponseMessageList_result implements org.apache.thrift.TBase<timResponseMessageList_result, timResponseMessageList_result._Fields>, java.io.Serializable, Cloneable, Comparable<timResponseMessageList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timResponseMessageList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timResponseMessageList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timResponseMessageList_resultTupleSchemeFactory());
    }

    public TimResponseBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimResponseBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timResponseMessageList_result.class, metaDataMap);
    }

    public timResponseMessageList_result() {
    }

    public timResponseMessageList_result(
      TimResponseBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timResponseMessageList_result(timResponseMessageList_result other) {
      if (other.isSetSuccess()) {
        this.success = new TimResponseBean(other.success);
      }
    }

    public timResponseMessageList_result deepCopy() {
      return new timResponseMessageList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TimResponseBean getSuccess() {
      return this.success;
    }

    public timResponseMessageList_result setSuccess(TimResponseBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TimResponseBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timResponseMessageList_result)
        return this.equals((timResponseMessageList_result)that);
      return false;
    }

    public boolean equals(timResponseMessageList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(timResponseMessageList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timResponseMessageList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timResponseMessageList_resultStandardSchemeFactory implements SchemeFactory {
      public timResponseMessageList_resultStandardScheme getScheme() {
        return new timResponseMessageList_resultStandardScheme();
      }
    }

    private static class timResponseMessageList_resultStandardScheme extends StandardScheme<timResponseMessageList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timResponseMessageList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TimResponseBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timResponseMessageList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timResponseMessageList_resultTupleSchemeFactory implements SchemeFactory {
      public timResponseMessageList_resultTupleScheme getScheme() {
        return new timResponseMessageList_resultTupleScheme();
      }
    }

    private static class timResponseMessageList_resultTupleScheme extends TupleScheme<timResponseMessageList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timResponseMessageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timResponseMessageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TimResponseBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
