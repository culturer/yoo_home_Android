/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-22")
public class TimMBean implements org.apache.thrift.TBase<TimMBean, TimMBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimMBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimMBean");

  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField OFFLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("offline", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField LEAGUER_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaguerTid", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("extraList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField READSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("readstatus", org.apache.thrift.protocol.TType.I16, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimMBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimMBeanTupleSchemeFactory());
  }

  /**
   * 线程id
   */
  public String threadId; // required
  /**
   * 消息id号
   */
  public String mid; // optional
  /**
   * 来源Tid
   */
  public Tid fromTid; // optional
  /**
   * 目标Tid
   */
  public Tid toTid; // optional
  /**
   * 信息内容
   */
  public String body; // optional
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  public String type; // optional
  /**
   * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
   */
  public short msgType; // optional
  /**
   * 是否离线信息
   */
  public TimTime offline; // optional
  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  public Tid leaguerTid; // optional
  /**
   * 扩展字段
   */
  public List<TimNode> extraList; // optional
  /**
   * 服务器发送信息时间戳(毫秒)
   */
  public String timestamp; // optional
  /**
   * 错误码
   */
  public TimError error; // optional
  public Map<String,String> extraMap; // optional
  /**
   * 0未读  1已读
   */
  public short readstatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 线程id
     */
    THREAD_ID((short)1, "threadId"),
    /**
     * 消息id号
     */
    MID((short)2, "mid"),
    /**
     * 来源Tid
     */
    FROM_TID((short)3, "fromTid"),
    /**
     * 目标Tid
     */
    TO_TID((short)4, "toTid"),
    /**
     * 信息内容
     */
    BODY((short)5, "body"),
    /**
     * normal：类似于email，主要特点是不要求响应；
     * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
     * groupchat：类似于聊天室里的群聊；
     * headline：用于发送alert和notification；
     * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
     */
    TYPE((short)6, "type"),
    /**
     * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
     */
    MSG_TYPE((short)7, "msgType"),
    /**
     * 是否离线信息
     */
    OFFLINE((short)8, "offline"),
    /**
     * 成员Tid   群聊时信息发送者Tid
     */
    LEAGUER_TID((short)9, "leaguerTid"),
    /**
     * 扩展字段
     */
    EXTRA_LIST((short)10, "extraList"),
    /**
     * 服务器发送信息时间戳(毫秒)
     */
    TIMESTAMP((short)11, "timestamp"),
    /**
     * 错误码
     */
    ERROR((short)12, "error"),
    EXTRA_MAP((short)13, "extraMap"),
    /**
     * 0未读  1已读
     */
    READSTATUS((short)14, "readstatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THREAD_ID
          return THREAD_ID;
        case 2: // MID
          return MID;
        case 3: // FROM_TID
          return FROM_TID;
        case 4: // TO_TID
          return TO_TID;
        case 5: // BODY
          return BODY;
        case 6: // TYPE
          return TYPE;
        case 7: // MSG_TYPE
          return MSG_TYPE;
        case 8: // OFFLINE
          return OFFLINE;
        case 9: // LEAGUER_TID
          return LEAGUER_TID;
        case 10: // EXTRA_LIST
          return EXTRA_LIST;
        case 11: // TIMESTAMP
          return TIMESTAMP;
        case 12: // ERROR
          return ERROR;
        case 13: // EXTRA_MAP
          return EXTRA_MAP;
        case 14: // READSTATUS
          return READSTATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __READSTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MID,_Fields.FROM_TID,_Fields.TO_TID,_Fields.BODY,_Fields.TYPE,_Fields.MSG_TYPE,_Fields.OFFLINE,_Fields.LEAGUER_TID,_Fields.EXTRA_LIST,_Fields.TIMESTAMP,_Fields.ERROR,_Fields.EXTRA_MAP,_Fields.READSTATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.OFFLINE, new org.apache.thrift.meta_data.FieldMetaData("offline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimTime.class)));
    tmpMap.put(_Fields.LEAGUER_TID, new org.apache.thrift.meta_data.FieldMetaData("leaguerTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.EXTRA_LIST, new org.apache.thrift.meta_data.FieldMetaData("extraList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimNode.class))));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimError.class)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.READSTATUS, new org.apache.thrift.meta_data.FieldMetaData("readstatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimMBean.class, metaDataMap);
  }

  public TimMBean() {
  }

  public TimMBean(
    String threadId)
  {
    this();
    this.threadId = threadId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimMBean(TimMBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetThreadId()) {
      this.threadId = other.threadId;
    }
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.msgType = other.msgType;
    if (other.isSetOffline()) {
      this.offline = new TimTime(other.offline);
    }
    if (other.isSetLeaguerTid()) {
      this.leaguerTid = new Tid(other.leaguerTid);
    }
    if (other.isSetExtraList()) {
      List<TimNode> __this__extraList = new ArrayList<TimNode>(other.extraList.size());
      for (TimNode other_element : other.extraList) {
        __this__extraList.add(new TimNode(other_element));
      }
      this.extraList = __this__extraList;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetError()) {
      this.error = new TimError(other.error);
    }
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
    this.readstatus = other.readstatus;
  }

  public TimMBean deepCopy() {
    return new TimMBean(this);
  }

  @Override
  public void clear() {
    this.threadId = null;
    this.mid = null;
    this.fromTid = null;
    this.toTid = null;
    this.body = null;
    this.type = null;
    setMsgTypeIsSet(false);
    this.msgType = 0;
    this.offline = null;
    this.leaguerTid = null;
    this.extraList = null;
    this.timestamp = null;
    this.error = null;
    this.extraMap = null;
    setReadstatusIsSet(false);
    this.readstatus = 0;
  }

  /**
   * 线程id
   */
  public String getThreadId() {
    return this.threadId;
  }

  /**
   * 线程id
   */
  public TimMBean setThreadId(String threadId) {
    this.threadId = threadId;
    return this;
  }

  public void unsetThreadId() {
    this.threadId = null;
  }

  /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadId() {
    return this.threadId != null;
  }

  public void setThreadIdIsSet(boolean value) {
    if (!value) {
      this.threadId = null;
    }
  }

  /**
   * 消息id号
   */
  public String getMid() {
    return this.mid;
  }

  /**
   * 消息id号
   */
  public TimMBean setMid(String mid) {
    this.mid = mid;
    return this;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  /**
   * 来源Tid
   */
  public Tid getFromTid() {
    return this.fromTid;
  }

  /**
   * 来源Tid
   */
  public TimMBean setFromTid(Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  /**
   * 目标Tid
   */
  public Tid getToTid() {
    return this.toTid;
  }

  /**
   * 目标Tid
   */
  public TimMBean setToTid(Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  /**
   * 信息内容
   */
  public String getBody() {
    return this.body;
  }

  /**
   * 信息内容
   */
  public TimMBean setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  public String getType() {
    return this.type;
  }

  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  public TimMBean setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
   */
  public short getMsgType() {
    return this.msgType;
  }

  /**
   * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
   */
  public TimMBean setMsgType(short msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  /**
   * 是否离线信息
   */
  public TimTime getOffline() {
    return this.offline;
  }

  /**
   * 是否离线信息
   */
  public TimMBean setOffline(TimTime offline) {
    this.offline = offline;
    return this;
  }

  public void unsetOffline() {
    this.offline = null;
  }

  /** Returns true if field offline is set (has been assigned a value) and false otherwise */
  public boolean isSetOffline() {
    return this.offline != null;
  }

  public void setOfflineIsSet(boolean value) {
    if (!value) {
      this.offline = null;
    }
  }

  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  public Tid getLeaguerTid() {
    return this.leaguerTid;
  }

  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  public TimMBean setLeaguerTid(Tid leaguerTid) {
    this.leaguerTid = leaguerTid;
    return this;
  }

  public void unsetLeaguerTid() {
    this.leaguerTid = null;
  }

  /** Returns true if field leaguerTid is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaguerTid() {
    return this.leaguerTid != null;
  }

  public void setLeaguerTidIsSet(boolean value) {
    if (!value) {
      this.leaguerTid = null;
    }
  }

  public int getExtraListSize() {
    return (this.extraList == null) ? 0 : this.extraList.size();
  }

  public java.util.Iterator<TimNode> getExtraListIterator() {
    return (this.extraList == null) ? null : this.extraList.iterator();
  }

  public void addToExtraList(TimNode elem) {
    if (this.extraList == null) {
      this.extraList = new ArrayList<TimNode>();
    }
    this.extraList.add(elem);
  }

  /**
   * 扩展字段
   */
  public List<TimNode> getExtraList() {
    return this.extraList;
  }

  /**
   * 扩展字段
   */
  public TimMBean setExtraList(List<TimNode> extraList) {
    this.extraList = extraList;
    return this;
  }

  public void unsetExtraList() {
    this.extraList = null;
  }

  /** Returns true if field extraList is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraList() {
    return this.extraList != null;
  }

  public void setExtraListIsSet(boolean value) {
    if (!value) {
      this.extraList = null;
    }
  }

  /**
   * 服务器发送信息时间戳(毫秒)
   */
  public String getTimestamp() {
    return this.timestamp;
  }

  /**
   * 服务器发送信息时间戳(毫秒)
   */
  public TimMBean setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  /**
   * 错误码
   */
  public TimError getError() {
    return this.error;
  }

  /**
   * 错误码
   */
  public TimMBean setError(TimError error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public TimMBean setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  /**
   * 0未读  1已读
   */
  public short getReadstatus() {
    return this.readstatus;
  }

  /**
   * 0未读  1已读
   */
  public TimMBean setReadstatus(short readstatus) {
    this.readstatus = readstatus;
    setReadstatusIsSet(true);
    return this;
  }

  public void unsetReadstatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READSTATUS_ISSET_ID);
  }

  /** Returns true if field readstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReadstatus() {
    return EncodingUtils.testBit(__isset_bitfield, __READSTATUS_ISSET_ID);
  }

  public void setReadstatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THREAD_ID:
      if (value == null) {
        unsetThreadId();
      } else {
        setThreadId((String)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((String)value);
      }
      break;

    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Short)value);
      }
      break;

    case OFFLINE:
      if (value == null) {
        unsetOffline();
      } else {
        setOffline((TimTime)value);
      }
      break;

    case LEAGUER_TID:
      if (value == null) {
        unsetLeaguerTid();
      } else {
        setLeaguerTid((Tid)value);
      }
      break;

    case EXTRA_LIST:
      if (value == null) {
        unsetExtraList();
      } else {
        setExtraList((List<TimNode>)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((TimError)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    case READSTATUS:
      if (value == null) {
        unsetReadstatus();
      } else {
        setReadstatus((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THREAD_ID:
      return getThreadId();

    case MID:
      return getMid();

    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case BODY:
      return getBody();

    case TYPE:
      return getType();

    case MSG_TYPE:
      return getMsgType();

    case OFFLINE:
      return getOffline();

    case LEAGUER_TID:
      return getLeaguerTid();

    case EXTRA_LIST:
      return getExtraList();

    case TIMESTAMP:
      return getTimestamp();

    case ERROR:
      return getError();

    case EXTRA_MAP:
      return getExtraMap();

    case READSTATUS:
      return getReadstatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THREAD_ID:
      return isSetThreadId();
    case MID:
      return isSetMid();
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case BODY:
      return isSetBody();
    case TYPE:
      return isSetType();
    case MSG_TYPE:
      return isSetMsgType();
    case OFFLINE:
      return isSetOffline();
    case LEAGUER_TID:
      return isSetLeaguerTid();
    case EXTRA_LIST:
      return isSetExtraList();
    case TIMESTAMP:
      return isSetTimestamp();
    case ERROR:
      return isSetError();
    case EXTRA_MAP:
      return isSetExtraMap();
    case READSTATUS:
      return isSetReadstatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimMBean)
      return this.equals((TimMBean)that);
    return false;
  }

  public boolean equals(TimMBean that) {
    if (that == null)
      return false;

    boolean this_present_threadId = true && this.isSetThreadId();
    boolean that_present_threadId = true && that.isSetThreadId();
    if (this_present_threadId || that_present_threadId) {
      if (!(this_present_threadId && that_present_threadId))
        return false;
      if (!this.threadId.equals(that.threadId))
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_msgType = true && this.isSetMsgType();
    boolean that_present_msgType = true && that.isSetMsgType();
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_offline = true && this.isSetOffline();
    boolean that_present_offline = true && that.isSetOffline();
    if (this_present_offline || that_present_offline) {
      if (!(this_present_offline && that_present_offline))
        return false;
      if (!this.offline.equals(that.offline))
        return false;
    }

    boolean this_present_leaguerTid = true && this.isSetLeaguerTid();
    boolean that_present_leaguerTid = true && that.isSetLeaguerTid();
    if (this_present_leaguerTid || that_present_leaguerTid) {
      if (!(this_present_leaguerTid && that_present_leaguerTid))
        return false;
      if (!this.leaguerTid.equals(that.leaguerTid))
        return false;
    }

    boolean this_present_extraList = true && this.isSetExtraList();
    boolean that_present_extraList = true && that.isSetExtraList();
    if (this_present_extraList || that_present_extraList) {
      if (!(this_present_extraList && that_present_extraList))
        return false;
      if (!this.extraList.equals(that.extraList))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    boolean this_present_readstatus = true && this.isSetReadstatus();
    boolean that_present_readstatus = true && that.isSetReadstatus();
    if (this_present_readstatus || that_present_readstatus) {
      if (!(this_present_readstatus && that_present_readstatus))
        return false;
      if (this.readstatus != that.readstatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_threadId = true && (isSetThreadId());
    list.add(present_threadId);
    if (present_threadId)
      list.add(threadId);

    boolean present_mid = true && (isSetMid());
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_fromTid = true && (isSetFromTid());
    list.add(present_fromTid);
    if (present_fromTid)
      list.add(fromTid);

    boolean present_toTid = true && (isSetToTid());
    list.add(present_toTid);
    if (present_toTid)
      list.add(toTid);

    boolean present_body = true && (isSetBody());
    list.add(present_body);
    if (present_body)
      list.add(body);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_msgType = true && (isSetMsgType());
    list.add(present_msgType);
    if (present_msgType)
      list.add(msgType);

    boolean present_offline = true && (isSetOffline());
    list.add(present_offline);
    if (present_offline)
      list.add(offline);

    boolean present_leaguerTid = true && (isSetLeaguerTid());
    list.add(present_leaguerTid);
    if (present_leaguerTid)
      list.add(leaguerTid);

    boolean present_extraList = true && (isSetExtraList());
    list.add(present_extraList);
    if (present_extraList)
      list.add(extraList);

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_error = true && (isSetError());
    list.add(present_error);
    if (present_error)
      list.add(error);

    boolean present_extraMap = true && (isSetExtraMap());
    list.add(present_extraMap);
    if (present_extraMap)
      list.add(extraMap);

    boolean present_readstatus = true && (isSetReadstatus());
    list.add(present_readstatus);
    if (present_readstatus)
      list.add(readstatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(TimMBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetThreadId()).compareTo(other.isSetThreadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromTid()).compareTo(other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTid()).compareTo(other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffline()).compareTo(other.isSetOffline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offline, other.offline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaguerTid()).compareTo(other.isSetLeaguerTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaguerTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaguerTid, other.leaguerTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraList()).compareTo(other.isSetExtraList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraList, other.extraList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadstatus()).compareTo(other.isSetReadstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readstatus, other.readstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimMBean(");
    boolean first = true;

    sb.append("threadId:");
    if (this.threadId == null) {
      sb.append("null");
    } else {
      sb.append(this.threadId);
    }
    first = false;
    if (isSetMid()) {
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
    }
    if (isSetFromTid()) {
      if (!first) sb.append(", ");
      sb.append("fromTid:");
      if (this.fromTid == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTid);
      }
      first = false;
    }
    if (isSetToTid()) {
      if (!first) sb.append(", ");
      sb.append("toTid:");
      if (this.toTid == null) {
        sb.append("null");
      } else {
        sb.append(this.toTid);
      }
      first = false;
    }
    if (isSetBody()) {
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetMsgType()) {
      if (!first) sb.append(", ");
      sb.append("msgType:");
      sb.append(this.msgType);
      first = false;
    }
    if (isSetOffline()) {
      if (!first) sb.append(", ");
      sb.append("offline:");
      if (this.offline == null) {
        sb.append("null");
      } else {
        sb.append(this.offline);
      }
      first = false;
    }
    if (isSetLeaguerTid()) {
      if (!first) sb.append(", ");
      sb.append("leaguerTid:");
      if (this.leaguerTid == null) {
        sb.append("null");
      } else {
        sb.append(this.leaguerTid);
      }
      first = false;
    }
    if (isSetExtraList()) {
      if (!first) sb.append(", ");
      sb.append("extraList:");
      if (this.extraList == null) {
        sb.append("null");
      } else {
        sb.append(this.extraList);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    if (isSetReadstatus()) {
      if (!first) sb.append(", ");
      sb.append("readstatus:");
      sb.append(this.readstatus);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (threadId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'threadId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
    if (offline != null) {
      offline.validate();
    }
    if (leaguerTid != null) {
      leaguerTid.validate();
    }
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimMBeanStandardSchemeFactory implements SchemeFactory {
    public TimMBeanStandardScheme getScheme() {
      return new TimMBeanStandardScheme();
    }
  }

  private static class TimMBeanStandardScheme extends StandardScheme<TimMBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimMBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.threadId = iprot.readString();
              struct.setThreadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mid = iprot.readString();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.msgType = iprot.readI16();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OFFLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.offline = new TimTime();
              struct.offline.read(iprot);
              struct.setOfflineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEAGUER_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leaguerTid = new Tid();
              struct.leaguerTid.read(iprot);
              struct.setLeaguerTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.extraList = new ArrayList<TimNode>(_list150.size);
                TimNode _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = new TimNode();
                  _elem151.read(iprot);
                  struct.extraList.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setExtraListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new TimError();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map153 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map153.size);
                String _key154;
                String _val155;
                for (int _i156 = 0; _i156 < _map153.size; ++_i156)
                {
                  _key154 = iprot.readString();
                  _val155 = iprot.readString();
                  struct.extraMap.put(_key154, _val155);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // READSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.readstatus = iprot.readI16();
              struct.setReadstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimMBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.threadId != null) {
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeString(struct.threadId);
        oprot.writeFieldEnd();
      }
      if (struct.mid != null) {
        if (struct.isSetMid()) {
          oprot.writeFieldBegin(MID_FIELD_DESC);
          oprot.writeString(struct.mid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromTid != null) {
        if (struct.isSetFromTid()) {
          oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
          struct.fromTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTid != null) {
        if (struct.isSetToTid()) {
          oprot.writeFieldBegin(TO_TID_FIELD_DESC);
          struct.toTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.body != null) {
        if (struct.isSetBody()) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMsgType()) {
        oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
        oprot.writeI16(struct.msgType);
        oprot.writeFieldEnd();
      }
      if (struct.offline != null) {
        if (struct.isSetOffline()) {
          oprot.writeFieldBegin(OFFLINE_FIELD_DESC);
          struct.offline.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.leaguerTid != null) {
        if (struct.isSetLeaguerTid()) {
          oprot.writeFieldBegin(LEAGUER_TID_FIELD_DESC);
          struct.leaguerTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraList != null) {
        if (struct.isSetExtraList()) {
          oprot.writeFieldBegin(EXTRA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraList.size()));
            for (TimNode _iter157 : struct.extraList)
            {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timestamp != null) {
        if (struct.isSetTimestamp()) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter158 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter158.getKey());
              oprot.writeString(_iter158.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReadstatus()) {
        oprot.writeFieldBegin(READSTATUS_FIELD_DESC);
        oprot.writeI16(struct.readstatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimMBeanTupleSchemeFactory implements SchemeFactory {
    public TimMBeanTupleScheme getScheme() {
      return new TimMBeanTupleScheme();
    }
  }

  private static class TimMBeanTupleScheme extends TupleScheme<TimMBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimMBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.threadId);
      BitSet optionals = new BitSet();
      if (struct.isSetMid()) {
        optionals.set(0);
      }
      if (struct.isSetFromTid()) {
        optionals.set(1);
      }
      if (struct.isSetToTid()) {
        optionals.set(2);
      }
      if (struct.isSetBody()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetMsgType()) {
        optionals.set(5);
      }
      if (struct.isSetOffline()) {
        optionals.set(6);
      }
      if (struct.isSetLeaguerTid()) {
        optionals.set(7);
      }
      if (struct.isSetExtraList()) {
        optionals.set(8);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetError()) {
        optionals.set(10);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(11);
      }
      if (struct.isSetReadstatus()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetMid()) {
        oprot.writeString(struct.mid);
      }
      if (struct.isSetFromTid()) {
        struct.fromTid.write(oprot);
      }
      if (struct.isSetToTid()) {
        struct.toTid.write(oprot);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetMsgType()) {
        oprot.writeI16(struct.msgType);
      }
      if (struct.isSetOffline()) {
        struct.offline.write(oprot);
      }
      if (struct.isSetLeaguerTid()) {
        struct.leaguerTid.write(oprot);
      }
      if (struct.isSetExtraList()) {
        {
          oprot.writeI32(struct.extraList.size());
          for (TimNode _iter159 : struct.extraList)
          {
            _iter159.write(oprot);
          }
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter160 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter160.getKey());
            oprot.writeString(_iter160.getValue());
          }
        }
      }
      if (struct.isSetReadstatus()) {
        oprot.writeI16(struct.readstatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimMBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.threadId = iprot.readString();
      struct.setThreadIdIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.mid = iprot.readString();
        struct.setMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromTid = new Tid();
        struct.fromTid.read(iprot);
        struct.setFromTidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.toTid = new Tid();
        struct.toTid.read(iprot);
        struct.setToTidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.msgType = iprot.readI16();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.offline = new TimTime();
        struct.offline.read(iprot);
        struct.setOfflineIsSet(true);
      }
      if (incoming.get(7)) {
        struct.leaguerTid = new Tid();
        struct.leaguerTid.read(iprot);
        struct.setLeaguerTidIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.extraList = new ArrayList<TimNode>(_list161.size);
          TimNode _elem162;
          for (int _i163 = 0; _i163 < _list161.size; ++_i163)
          {
            _elem162 = new TimNode();
            _elem162.read(iprot);
            struct.extraList.add(_elem162);
          }
        }
        struct.setExtraListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.error = new TimError();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map164.size);
          String _key165;
          String _val166;
          for (int _i167 = 0; _i167 < _map164.size; ++_i167)
          {
            _key165 = iprot.readString();
            _val166 = iprot.readString();
            struct.extraMap.put(_key165, _val166);
          }
        }
        struct.setExtraMapIsSet(true);
      }
      if (incoming.get(12)) {
        struct.readstatus = iprot.readI16();
        struct.setReadstatusIsSet(true);
      }
    }
  }

}

