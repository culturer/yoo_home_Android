/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-22")
public class TimSock5Bean implements org.apache.thrift.TBase<TimSock5Bean, TimSock5Bean._Fields>, java.io.Serializable, Cloneable, Comparable<TimSock5Bean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimSock5Bean");

  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRANSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("transport", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField PUB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pubId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimSock5BeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimSock5BeanTupleSchemeFactory());
  }

  public Tid fromTid; // required
  public Tid toTid; // required
  /**
   * ip地址
   */
  public String addr; // required
  /**
   * 端口
   */
  public int port; // required
  /**
   * 传输类型  1:tcp 2:udp
   */
  public short transport; // required
  /**
   * 发布id 通过发布id 可以连接两个发布id相同的用户
   */
  public String pubId; // required
  public Map<String,String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_TID((short)1, "fromTid"),
    TO_TID((short)2, "toTid"),
    /**
     * ip地址
     */
    ADDR((short)3, "addr"),
    /**
     * 端口
     */
    PORT((short)4, "port"),
    /**
     * 传输类型  1:tcp 2:udp
     */
    TRANSPORT((short)5, "transport"),
    /**
     * 发布id 通过发布id 可以连接两个发布id相同的用户
     */
    PUB_ID((short)6, "pubId"),
    EXTRA_MAP((short)7, "extraMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_TID
          return FROM_TID;
        case 2: // TO_TID
          return TO_TID;
        case 3: // ADDR
          return ADDR;
        case 4: // PORT
          return PORT;
        case 5: // TRANSPORT
          return TRANSPORT;
        case 6: // PUB_ID
          return PUB_ID;
        case 7: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __TRANSPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXTRA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSPORT, new org.apache.thrift.meta_data.FieldMetaData("transport", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PUB_ID, new org.apache.thrift.meta_data.FieldMetaData("pubId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimSock5Bean.class, metaDataMap);
  }

  public TimSock5Bean() {
  }

  public TimSock5Bean(
    Tid fromTid,
    Tid toTid,
    String addr,
    int port,
    short transport,
    String pubId)
  {
    this();
    this.fromTid = fromTid;
    this.toTid = toTid;
    this.addr = addr;
    this.port = port;
    setPortIsSet(true);
    this.transport = transport;
    setTransportIsSet(true);
    this.pubId = pubId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimSock5Bean(TimSock5Bean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetAddr()) {
      this.addr = other.addr;
    }
    this.port = other.port;
    this.transport = other.transport;
    if (other.isSetPubId()) {
      this.pubId = other.pubId;
    }
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
  }

  public TimSock5Bean deepCopy() {
    return new TimSock5Bean(this);
  }

  @Override
  public void clear() {
    this.fromTid = null;
    this.toTid = null;
    this.addr = null;
    setPortIsSet(false);
    this.port = 0;
    setTransportIsSet(false);
    this.transport = 0;
    this.pubId = null;
    this.extraMap = null;
  }

  public Tid getFromTid() {
    return this.fromTid;
  }

  public TimSock5Bean setFromTid(Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  public Tid getToTid() {
    return this.toTid;
  }

  public TimSock5Bean setToTid(Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  /**
   * ip地址
   */
  public String getAddr() {
    return this.addr;
  }

  /**
   * ip地址
   */
  public TimSock5Bean setAddr(String addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  /**
   * 端口
   */
  public int getPort() {
    return this.port;
  }

  /**
   * 端口
   */
  public TimSock5Bean setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  /**
   * 传输类型  1:tcp 2:udp
   */
  public short getTransport() {
    return this.transport;
  }

  /**
   * 传输类型  1:tcp 2:udp
   */
  public TimSock5Bean setTransport(short transport) {
    this.transport = transport;
    setTransportIsSet(true);
    return this;
  }

  public void unsetTransport() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
  }

  /** Returns true if field transport is set (has been assigned a value) and false otherwise */
  public boolean isSetTransport() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
  }

  public void setTransportIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSPORT_ISSET_ID, value);
  }

  /**
   * 发布id 通过发布id 可以连接两个发布id相同的用户
   */
  public String getPubId() {
    return this.pubId;
  }

  /**
   * 发布id 通过发布id 可以连接两个发布id相同的用户
   */
  public TimSock5Bean setPubId(String pubId) {
    this.pubId = pubId;
    return this;
  }

  public void unsetPubId() {
    this.pubId = null;
  }

  /** Returns true if field pubId is set (has been assigned a value) and false otherwise */
  public boolean isSetPubId() {
    return this.pubId != null;
  }

  public void setPubIdIsSet(boolean value) {
    if (!value) {
      this.pubId = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public TimSock5Bean setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case TRANSPORT:
      if (value == null) {
        unsetTransport();
      } else {
        setTransport((Short)value);
      }
      break;

    case PUB_ID:
      if (value == null) {
        unsetPubId();
      } else {
        setPubId((String)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case ADDR:
      return getAddr();

    case PORT:
      return getPort();

    case TRANSPORT:
      return getTransport();

    case PUB_ID:
      return getPubId();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case ADDR:
      return isSetAddr();
    case PORT:
      return isSetPort();
    case TRANSPORT:
      return isSetTransport();
    case PUB_ID:
      return isSetPubId();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimSock5Bean)
      return this.equals((TimSock5Bean)that);
    return false;
  }

  public boolean equals(TimSock5Bean that) {
    if (that == null)
      return false;

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_transport = true;
    boolean that_present_transport = true;
    if (this_present_transport || that_present_transport) {
      if (!(this_present_transport && that_present_transport))
        return false;
      if (this.transport != that.transport)
        return false;
    }

    boolean this_present_pubId = true && this.isSetPubId();
    boolean that_present_pubId = true && that.isSetPubId();
    if (this_present_pubId || that_present_pubId) {
      if (!(this_present_pubId && that_present_pubId))
        return false;
      if (!this.pubId.equals(that.pubId))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fromTid = true && (isSetFromTid());
    list.add(present_fromTid);
    if (present_fromTid)
      list.add(fromTid);

    boolean present_toTid = true && (isSetToTid());
    list.add(present_toTid);
    if (present_toTid)
      list.add(toTid);

    boolean present_addr = true && (isSetAddr());
    list.add(present_addr);
    if (present_addr)
      list.add(addr);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_transport = true;
    list.add(present_transport);
    if (present_transport)
      list.add(transport);

    boolean present_pubId = true && (isSetPubId());
    list.add(present_pubId);
    if (present_pubId)
      list.add(pubId);

    boolean present_extraMap = true && (isSetExtraMap());
    list.add(present_extraMap);
    if (present_extraMap)
      list.add(extraMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(TimSock5Bean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromTid()).compareTo(other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTid()).compareTo(other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransport()).compareTo(other.isSetTransport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transport, other.transport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubId()).compareTo(other.isSetPubId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubId, other.pubId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimSock5Bean(");
    boolean first = true;

    sb.append("fromTid:");
    if (this.fromTid == null) {
      sb.append("null");
    } else {
      sb.append(this.fromTid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toTid:");
    if (this.toTid == null) {
      sb.append("null");
    } else {
      sb.append(this.toTid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addr:");
    if (this.addr == null) {
      sb.append("null");
    } else {
      sb.append(this.addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transport:");
    sb.append(this.transport);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubId:");
    if (this.pubId == null) {
      sb.append("null");
    } else {
      sb.append(this.pubId);
    }
    first = false;
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fromTid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromTid' was not present! Struct: " + toString());
    }
    if (toTid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toTid' was not present! Struct: " + toString());
    }
    if (addr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transport' because it's a primitive and you chose the non-beans generator.
    if (pubId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimSock5BeanStandardSchemeFactory implements SchemeFactory {
    public TimSock5BeanStandardScheme getScheme() {
      return new TimSock5BeanStandardScheme();
    }
  }

  private static class TimSock5BeanStandardScheme extends StandardScheme<TimSock5Bean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimSock5Bean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addr = iprot.readString();
              struct.setAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANSPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.transport = iprot.readI16();
              struct.setTransportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubId = iprot.readString();
              struct.setPubIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map234 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map234.size);
                String _key235;
                String _val236;
                for (int _i237 = 0; _i237 < _map234.size; ++_i237)
                {
                  _key235 = iprot.readString();
                  _val236 = iprot.readString();
                  struct.extraMap.put(_key235, _val236);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransport()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transport' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimSock5Bean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromTid != null) {
        oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
        struct.fromTid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.toTid != null) {
        oprot.writeFieldBegin(TO_TID_FIELD_DESC);
        struct.toTid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.addr != null) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        oprot.writeString(struct.addr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSPORT_FIELD_DESC);
      oprot.writeI16(struct.transport);
      oprot.writeFieldEnd();
      if (struct.pubId != null) {
        oprot.writeFieldBegin(PUB_ID_FIELD_DESC);
        oprot.writeString(struct.pubId);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter238 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter238.getKey());
              oprot.writeString(_iter238.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimSock5BeanTupleSchemeFactory implements SchemeFactory {
    public TimSock5BeanTupleScheme getScheme() {
      return new TimSock5BeanTupleScheme();
    }
  }

  private static class TimSock5BeanTupleScheme extends TupleScheme<TimSock5Bean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimSock5Bean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fromTid.write(oprot);
      struct.toTid.write(oprot);
      oprot.writeString(struct.addr);
      oprot.writeI32(struct.port);
      oprot.writeI16(struct.transport);
      oprot.writeString(struct.pubId);
      BitSet optionals = new BitSet();
      if (struct.isSetExtraMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter239 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter239.getKey());
            oprot.writeString(_iter239.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimSock5Bean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fromTid = new Tid();
      struct.fromTid.read(iprot);
      struct.setFromTidIsSet(true);
      struct.toTid = new Tid();
      struct.toTid.read(iprot);
      struct.setToTidIsSet(true);
      struct.addr = iprot.readString();
      struct.setAddrIsSet(true);
      struct.port = iprot.readI32();
      struct.setPortIsSet(true);
      struct.transport = iprot.readI16();
      struct.setTransportIsSet(true);
      struct.pubId = iprot.readString();
      struct.setPubIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map240 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map240.size);
          String _key241;
          String _val242;
          for (int _i243 = 0; _i243 < _map240.size; ++_i243)
          {
            _key241 = iprot.readString();
            _val242 = iprot.readString();
            struct.extraMap.put(_key241, _val242);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

}

