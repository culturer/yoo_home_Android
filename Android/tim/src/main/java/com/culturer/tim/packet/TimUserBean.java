/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-22")
public class TimUserBean implements org.apache.thrift.TBase<TimUserBean, TimUserBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimUserBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimUserBean");

  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REMARKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("remarkname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BRITHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("brithday", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField HEADURL_FIELD_DESC = new org.apache.thrift.protocol.TField("headurl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField HEADBYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("headbyte", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHOTO_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("photoBytes", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("extraList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimUserBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimUserBeanTupleSchemeFactory());
  }

  /**
   * 用户bean
   */
  public Tid tid; // optional
  /**
   * 昵称
   */
  public String nickname; // optional
  /**
   * 备注名称
   */
  public String remarkname; // optional
  /**
   * 生日     2000-01-01
   */
  public String brithday; // optional
  /**
   * 性别  自行约定 如 ：  0不知，1男，2女
   */
  public short gender; // optional
  /**
   * 头像地址 http://xxx.jpg
   */
  public String headurl; // optional
  /**
   * 地区
   */
  public TimArea area; // optional
  /**
   * 头像
   */
  public ByteBuffer headbyte; // optional
  /**
   * 其他图片
   */
  public List<ByteBuffer> photoBytes; // optional
  /**
   * 扩展字段
   */
  public List<TimNode> extraList; // optional
  public Map<String,String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户bean
     */
    TID((short)1, "tid"),
    /**
     * 昵称
     */
    NICKNAME((short)2, "nickname"),
    /**
     * 备注名称
     */
    REMARKNAME((short)3, "remarkname"),
    /**
     * 生日     2000-01-01
     */
    BRITHDAY((short)4, "brithday"),
    /**
     * 性别  自行约定 如 ：  0不知，1男，2女
     */
    GENDER((short)5, "gender"),
    /**
     * 头像地址 http://xxx.jpg
     */
    HEADURL((short)6, "headurl"),
    /**
     * 地区
     */
    AREA((short)7, "area"),
    /**
     * 头像
     */
    HEADBYTE((short)8, "headbyte"),
    /**
     * 其他图片
     */
    PHOTO_BYTES((short)9, "photoBytes"),
    /**
     * 扩展字段
     */
    EXTRA_LIST((short)10, "extraList"),
    EXTRA_MAP((short)11, "extraMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TID
          return TID;
        case 2: // NICKNAME
          return NICKNAME;
        case 3: // REMARKNAME
          return REMARKNAME;
        case 4: // BRITHDAY
          return BRITHDAY;
        case 5: // GENDER
          return GENDER;
        case 6: // HEADURL
          return HEADURL;
        case 7: // AREA
          return AREA;
        case 8: // HEADBYTE
          return HEADBYTE;
        case 9: // PHOTO_BYTES
          return PHOTO_BYTES;
        case 10: // EXTRA_LIST
          return EXTRA_LIST;
        case 11: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENDER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TID,_Fields.NICKNAME,_Fields.REMARKNAME,_Fields.BRITHDAY,_Fields.GENDER,_Fields.HEADURL,_Fields.AREA,_Fields.HEADBYTE,_Fields.PHOTO_BYTES,_Fields.EXTRA_LIST,_Fields.EXTRA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARKNAME, new org.apache.thrift.meta_data.FieldMetaData("remarkname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRITHDAY, new org.apache.thrift.meta_data.FieldMetaData("brithday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HEADURL, new org.apache.thrift.meta_data.FieldMetaData("headurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimArea.class)));
    tmpMap.put(_Fields.HEADBYTE, new org.apache.thrift.meta_data.FieldMetaData("headbyte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PHOTO_BYTES, new org.apache.thrift.meta_data.FieldMetaData("photoBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.EXTRA_LIST, new org.apache.thrift.meta_data.FieldMetaData("extraList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimNode.class))));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimUserBean.class, metaDataMap);
  }

  public TimUserBean() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimUserBean(TimUserBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTid()) {
      this.tid = new Tid(other.tid);
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetRemarkname()) {
      this.remarkname = other.remarkname;
    }
    if (other.isSetBrithday()) {
      this.brithday = other.brithday;
    }
    this.gender = other.gender;
    if (other.isSetHeadurl()) {
      this.headurl = other.headurl;
    }
    if (other.isSetArea()) {
      this.area = new TimArea(other.area);
    }
    if (other.isSetHeadbyte()) {
      this.headbyte = org.apache.thrift.TBaseHelper.copyBinary(other.headbyte);
    }
    if (other.isSetPhotoBytes()) {
      List<ByteBuffer> __this__photoBytes = new ArrayList<ByteBuffer>(other.photoBytes);
      this.photoBytes = __this__photoBytes;
    }
    if (other.isSetExtraList()) {
      List<TimNode> __this__extraList = new ArrayList<TimNode>(other.extraList.size());
      for (TimNode other_element : other.extraList) {
        __this__extraList.add(new TimNode(other_element));
      }
      this.extraList = __this__extraList;
    }
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
  }

  public TimUserBean deepCopy() {
    return new TimUserBean(this);
  }

  @Override
  public void clear() {
    this.tid = null;
    this.nickname = null;
    this.remarkname = null;
    this.brithday = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.headurl = null;
    this.area = null;
    this.headbyte = null;
    this.photoBytes = null;
    this.extraList = null;
    this.extraMap = null;
  }

  /**
   * 用户bean
   */
  public Tid getTid() {
    return this.tid;
  }

  /**
   * 用户bean
   */
  public TimUserBean setTid(Tid tid) {
    this.tid = tid;
    return this;
  }

  public void unsetTid() {
    this.tid = null;
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return this.tid != null;
  }

  public void setTidIsSet(boolean value) {
    if (!value) {
      this.tid = null;
    }
  }

  /**
   * 昵称
   */
  public String getNickname() {
    return this.nickname;
  }

  /**
   * 昵称
   */
  public TimUserBean setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  /**
   * 备注名称
   */
  public String getRemarkname() {
    return this.remarkname;
  }

  /**
   * 备注名称
   */
  public TimUserBean setRemarkname(String remarkname) {
    this.remarkname = remarkname;
    return this;
  }

  public void unsetRemarkname() {
    this.remarkname = null;
  }

  /** Returns true if field remarkname is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarkname() {
    return this.remarkname != null;
  }

  public void setRemarknameIsSet(boolean value) {
    if (!value) {
      this.remarkname = null;
    }
  }

  /**
   * 生日     2000-01-01
   */
  public String getBrithday() {
    return this.brithday;
  }

  /**
   * 生日     2000-01-01
   */
  public TimUserBean setBrithday(String brithday) {
    this.brithday = brithday;
    return this;
  }

  public void unsetBrithday() {
    this.brithday = null;
  }

  /** Returns true if field brithday is set (has been assigned a value) and false otherwise */
  public boolean isSetBrithday() {
    return this.brithday != null;
  }

  public void setBrithdayIsSet(boolean value) {
    if (!value) {
      this.brithday = null;
    }
  }

  /**
   * 性别  自行约定 如 ：  0不知，1男，2女
   */
  public short getGender() {
    return this.gender;
  }

  /**
   * 性别  自行约定 如 ：  0不知，1男，2女
   */
  public TimUserBean setGender(short gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  /**
   * 头像地址 http://xxx.jpg
   */
  public String getHeadurl() {
    return this.headurl;
  }

  /**
   * 头像地址 http://xxx.jpg
   */
  public TimUserBean setHeadurl(String headurl) {
    this.headurl = headurl;
    return this;
  }

  public void unsetHeadurl() {
    this.headurl = null;
  }

  /** Returns true if field headurl is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadurl() {
    return this.headurl != null;
  }

  public void setHeadurlIsSet(boolean value) {
    if (!value) {
      this.headurl = null;
    }
  }

  /**
   * 地区
   */
  public TimArea getArea() {
    return this.area;
  }

  /**
   * 地区
   */
  public TimUserBean setArea(TimArea area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  /**
   * 头像
   */
  public byte[] getHeadbyte() {
    setHeadbyte(org.apache.thrift.TBaseHelper.rightSize(headbyte));
    return headbyte == null ? null : headbyte.array();
  }

  public ByteBuffer bufferForHeadbyte() {
    return org.apache.thrift.TBaseHelper.copyBinary(headbyte);
  }

  /**
   * 头像
   */
  public TimUserBean setHeadbyte(byte[] headbyte) {
    this.headbyte = headbyte == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(headbyte, headbyte.length));
    return this;
  }

  public TimUserBean setHeadbyte(ByteBuffer headbyte) {
    this.headbyte = org.apache.thrift.TBaseHelper.copyBinary(headbyte);
    return this;
  }

  public void unsetHeadbyte() {
    this.headbyte = null;
  }

  /** Returns true if field headbyte is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadbyte() {
    return this.headbyte != null;
  }

  public void setHeadbyteIsSet(boolean value) {
    if (!value) {
      this.headbyte = null;
    }
  }

  public int getPhotoBytesSize() {
    return (this.photoBytes == null) ? 0 : this.photoBytes.size();
  }

  public java.util.Iterator<ByteBuffer> getPhotoBytesIterator() {
    return (this.photoBytes == null) ? null : this.photoBytes.iterator();
  }

  public void addToPhotoBytes(ByteBuffer elem) {
    if (this.photoBytes == null) {
      this.photoBytes = new ArrayList<ByteBuffer>();
    }
    this.photoBytes.add(elem);
  }

  /**
   * 其他图片
   */
  public List<ByteBuffer> getPhotoBytes() {
    return this.photoBytes;
  }

  /**
   * 其他图片
   */
  public TimUserBean setPhotoBytes(List<ByteBuffer> photoBytes) {
    this.photoBytes = photoBytes;
    return this;
  }

  public void unsetPhotoBytes() {
    this.photoBytes = null;
  }

  /** Returns true if field photoBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoBytes() {
    return this.photoBytes != null;
  }

  public void setPhotoBytesIsSet(boolean value) {
    if (!value) {
      this.photoBytes = null;
    }
  }

  public int getExtraListSize() {
    return (this.extraList == null) ? 0 : this.extraList.size();
  }

  public java.util.Iterator<TimNode> getExtraListIterator() {
    return (this.extraList == null) ? null : this.extraList.iterator();
  }

  public void addToExtraList(TimNode elem) {
    if (this.extraList == null) {
      this.extraList = new ArrayList<TimNode>();
    }
    this.extraList.add(elem);
  }

  /**
   * 扩展字段
   */
  public List<TimNode> getExtraList() {
    return this.extraList;
  }

  /**
   * 扩展字段
   */
  public TimUserBean setExtraList(List<TimNode> extraList) {
    this.extraList = extraList;
    return this;
  }

  public void unsetExtraList() {
    this.extraList = null;
  }

  /** Returns true if field extraList is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraList() {
    return this.extraList != null;
  }

  public void setExtraListIsSet(boolean value) {
    if (!value) {
      this.extraList = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public TimUserBean setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Tid)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case REMARKNAME:
      if (value == null) {
        unsetRemarkname();
      } else {
        setRemarkname((String)value);
      }
      break;

    case BRITHDAY:
      if (value == null) {
        unsetBrithday();
      } else {
        setBrithday((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Short)value);
      }
      break;

    case HEADURL:
      if (value == null) {
        unsetHeadurl();
      } else {
        setHeadurl((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((TimArea)value);
      }
      break;

    case HEADBYTE:
      if (value == null) {
        unsetHeadbyte();
      } else {
        setHeadbyte((ByteBuffer)value);
      }
      break;

    case PHOTO_BYTES:
      if (value == null) {
        unsetPhotoBytes();
      } else {
        setPhotoBytes((List<ByteBuffer>)value);
      }
      break;

    case EXTRA_LIST:
      if (value == null) {
        unsetExtraList();
      } else {
        setExtraList((List<TimNode>)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TID:
      return getTid();

    case NICKNAME:
      return getNickname();

    case REMARKNAME:
      return getRemarkname();

    case BRITHDAY:
      return getBrithday();

    case GENDER:
      return getGender();

    case HEADURL:
      return getHeadurl();

    case AREA:
      return getArea();

    case HEADBYTE:
      return getHeadbyte();

    case PHOTO_BYTES:
      return getPhotoBytes();

    case EXTRA_LIST:
      return getExtraList();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TID:
      return isSetTid();
    case NICKNAME:
      return isSetNickname();
    case REMARKNAME:
      return isSetRemarkname();
    case BRITHDAY:
      return isSetBrithday();
    case GENDER:
      return isSetGender();
    case HEADURL:
      return isSetHeadurl();
    case AREA:
      return isSetArea();
    case HEADBYTE:
      return isSetHeadbyte();
    case PHOTO_BYTES:
      return isSetPhotoBytes();
    case EXTRA_LIST:
      return isSetExtraList();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimUserBean)
      return this.equals((TimUserBean)that);
    return false;
  }

  public boolean equals(TimUserBean that) {
    if (that == null)
      return false;

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (!this.tid.equals(that.tid))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_remarkname = true && this.isSetRemarkname();
    boolean that_present_remarkname = true && that.isSetRemarkname();
    if (this_present_remarkname || that_present_remarkname) {
      if (!(this_present_remarkname && that_present_remarkname))
        return false;
      if (!this.remarkname.equals(that.remarkname))
        return false;
    }

    boolean this_present_brithday = true && this.isSetBrithday();
    boolean that_present_brithday = true && that.isSetBrithday();
    if (this_present_brithday || that_present_brithday) {
      if (!(this_present_brithday && that_present_brithday))
        return false;
      if (!this.brithday.equals(that.brithday))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_headurl = true && this.isSetHeadurl();
    boolean that_present_headurl = true && that.isSetHeadurl();
    if (this_present_headurl || that_present_headurl) {
      if (!(this_present_headurl && that_present_headurl))
        return false;
      if (!this.headurl.equals(that.headurl))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_headbyte = true && this.isSetHeadbyte();
    boolean that_present_headbyte = true && that.isSetHeadbyte();
    if (this_present_headbyte || that_present_headbyte) {
      if (!(this_present_headbyte && that_present_headbyte))
        return false;
      if (!this.headbyte.equals(that.headbyte))
        return false;
    }

    boolean this_present_photoBytes = true && this.isSetPhotoBytes();
    boolean that_present_photoBytes = true && that.isSetPhotoBytes();
    if (this_present_photoBytes || that_present_photoBytes) {
      if (!(this_present_photoBytes && that_present_photoBytes))
        return false;
      if (!this.photoBytes.equals(that.photoBytes))
        return false;
    }

    boolean this_present_extraList = true && this.isSetExtraList();
    boolean that_present_extraList = true && that.isSetExtraList();
    if (this_present_extraList || that_present_extraList) {
      if (!(this_present_extraList && that_present_extraList))
        return false;
      if (!this.extraList.equals(that.extraList))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tid = true && (isSetTid());
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_nickname = true && (isSetNickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_remarkname = true && (isSetRemarkname());
    list.add(present_remarkname);
    if (present_remarkname)
      list.add(remarkname);

    boolean present_brithday = true && (isSetBrithday());
    list.add(present_brithday);
    if (present_brithday)
      list.add(brithday);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_headurl = true && (isSetHeadurl());
    list.add(present_headurl);
    if (present_headurl)
      list.add(headurl);

    boolean present_area = true && (isSetArea());
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_headbyte = true && (isSetHeadbyte());
    list.add(present_headbyte);
    if (present_headbyte)
      list.add(headbyte);

    boolean present_photoBytes = true && (isSetPhotoBytes());
    list.add(present_photoBytes);
    if (present_photoBytes)
      list.add(photoBytes);

    boolean present_extraList = true && (isSetExtraList());
    list.add(present_extraList);
    if (present_extraList)
      list.add(extraList);

    boolean present_extraMap = true && (isSetExtraMap());
    list.add(present_extraMap);
    if (present_extraMap)
      list.add(extraMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(TimUserBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarkname()).compareTo(other.isSetRemarkname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarkname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarkname, other.remarkname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrithday()).compareTo(other.isSetBrithday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrithday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brithday, other.brithday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadurl()).compareTo(other.isSetHeadurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headurl, other.headurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadbyte()).compareTo(other.isSetHeadbyte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadbyte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headbyte, other.headbyte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoBytes()).compareTo(other.isSetPhotoBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoBytes, other.photoBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraList()).compareTo(other.isSetExtraList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraList, other.extraList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimUserBean(");
    boolean first = true;

    if (isSetTid()) {
      sb.append("tid:");
      if (this.tid == null) {
        sb.append("null");
      } else {
        sb.append(this.tid);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetRemarkname()) {
      if (!first) sb.append(", ");
      sb.append("remarkname:");
      if (this.remarkname == null) {
        sb.append("null");
      } else {
        sb.append(this.remarkname);
      }
      first = false;
    }
    if (isSetBrithday()) {
      if (!first) sb.append(", ");
      sb.append("brithday:");
      if (this.brithday == null) {
        sb.append("null");
      } else {
        sb.append(this.brithday);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetHeadurl()) {
      if (!first) sb.append(", ");
      sb.append("headurl:");
      if (this.headurl == null) {
        sb.append("null");
      } else {
        sb.append(this.headurl);
      }
      first = false;
    }
    if (isSetArea()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    if (isSetHeadbyte()) {
      if (!first) sb.append(", ");
      sb.append("headbyte:");
      if (this.headbyte == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.headbyte, sb);
      }
      first = false;
    }
    if (isSetPhotoBytes()) {
      if (!first) sb.append(", ");
      sb.append("photoBytes:");
      if (this.photoBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.photoBytes, sb);
      }
      first = false;
    }
    if (isSetExtraList()) {
      if (!first) sb.append(", ");
      sb.append("extraList:");
      if (this.extraList == null) {
        sb.append("null");
      } else {
        sb.append(this.extraList);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tid != null) {
      tid.validate();
    }
    if (area != null) {
      area.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimUserBeanStandardSchemeFactory implements SchemeFactory {
    public TimUserBeanStandardScheme getScheme() {
      return new TimUserBeanStandardScheme();
    }
  }

  private static class TimUserBeanStandardScheme extends StandardScheme<TimUserBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimUserBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tid = new Tid();
              struct.tid.read(iprot);
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarkname = iprot.readString();
              struct.setRemarknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRITHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brithday = iprot.readString();
              struct.setBrithdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.gender = iprot.readI16();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEADURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headurl = iprot.readString();
              struct.setHeadurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.area = new TimArea();
              struct.area.read(iprot);
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEADBYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headbyte = iprot.readBinary();
              struct.setHeadbyteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHOTO_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.photoBytes = new ArrayList<ByteBuffer>(_list72.size);
                ByteBuffer _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readBinary();
                  struct.photoBytes.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setPhotoBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.extraList = new ArrayList<TimNode>(_list75.size);
                TimNode _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = new TimNode();
                  _elem76.read(iprot);
                  struct.extraList.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setExtraListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map78.size);
                String _key79;
                String _val80;
                for (int _i81 = 0; _i81 < _map78.size; ++_i81)
                {
                  _key79 = iprot.readString();
                  _val80 = iprot.readString();
                  struct.extraMap.put(_key79, _val80);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimUserBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tid != null) {
        if (struct.isSetTid()) {
          oprot.writeFieldBegin(TID_FIELD_DESC);
          struct.tid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remarkname != null) {
        if (struct.isSetRemarkname()) {
          oprot.writeFieldBegin(REMARKNAME_FIELD_DESC);
          oprot.writeString(struct.remarkname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brithday != null) {
        if (struct.isSetBrithday()) {
          oprot.writeFieldBegin(BRITHDAY_FIELD_DESC);
          oprot.writeString(struct.brithday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI16(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.headurl != null) {
        if (struct.isSetHeadurl()) {
          oprot.writeFieldBegin(HEADURL_FIELD_DESC);
          oprot.writeString(struct.headurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.area != null) {
        if (struct.isSetArea()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          struct.area.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headbyte != null) {
        if (struct.isSetHeadbyte()) {
          oprot.writeFieldBegin(HEADBYTE_FIELD_DESC);
          oprot.writeBinary(struct.headbyte);
          oprot.writeFieldEnd();
        }
      }
      if (struct.photoBytes != null) {
        if (struct.isSetPhotoBytes()) {
          oprot.writeFieldBegin(PHOTO_BYTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.photoBytes.size()));
            for (ByteBuffer _iter82 : struct.photoBytes)
            {
              oprot.writeBinary(_iter82);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraList != null) {
        if (struct.isSetExtraList()) {
          oprot.writeFieldBegin(EXTRA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraList.size()));
            for (TimNode _iter83 : struct.extraList)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter84 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter84.getKey());
              oprot.writeString(_iter84.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimUserBeanTupleSchemeFactory implements SchemeFactory {
    public TimUserBeanTupleScheme getScheme() {
      return new TimUserBeanTupleScheme();
    }
  }

  private static class TimUserBeanTupleScheme extends TupleScheme<TimUserBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimUserBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTid()) {
        optionals.set(0);
      }
      if (struct.isSetNickname()) {
        optionals.set(1);
      }
      if (struct.isSetRemarkname()) {
        optionals.set(2);
      }
      if (struct.isSetBrithday()) {
        optionals.set(3);
      }
      if (struct.isSetGender()) {
        optionals.set(4);
      }
      if (struct.isSetHeadurl()) {
        optionals.set(5);
      }
      if (struct.isSetArea()) {
        optionals.set(6);
      }
      if (struct.isSetHeadbyte()) {
        optionals.set(7);
      }
      if (struct.isSetPhotoBytes()) {
        optionals.set(8);
      }
      if (struct.isSetExtraList()) {
        optionals.set(9);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTid()) {
        struct.tid.write(oprot);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetRemarkname()) {
        oprot.writeString(struct.remarkname);
      }
      if (struct.isSetBrithday()) {
        oprot.writeString(struct.brithday);
      }
      if (struct.isSetGender()) {
        oprot.writeI16(struct.gender);
      }
      if (struct.isSetHeadurl()) {
        oprot.writeString(struct.headurl);
      }
      if (struct.isSetArea()) {
        struct.area.write(oprot);
      }
      if (struct.isSetHeadbyte()) {
        oprot.writeBinary(struct.headbyte);
      }
      if (struct.isSetPhotoBytes()) {
        {
          oprot.writeI32(struct.photoBytes.size());
          for (ByteBuffer _iter85 : struct.photoBytes)
          {
            oprot.writeBinary(_iter85);
          }
        }
      }
      if (struct.isSetExtraList()) {
        {
          oprot.writeI32(struct.extraList.size());
          for (TimNode _iter86 : struct.extraList)
          {
            _iter86.write(oprot);
          }
        }
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter87 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter87.getKey());
            oprot.writeString(_iter87.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimUserBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.tid = new Tid();
        struct.tid.read(iprot);
        struct.setTidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remarkname = iprot.readString();
        struct.setRemarknameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brithday = iprot.readString();
        struct.setBrithdayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gender = iprot.readI16();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.headurl = iprot.readString();
        struct.setHeadurlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.area = new TimArea();
        struct.area.read(iprot);
        struct.setAreaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.headbyte = iprot.readBinary();
        struct.setHeadbyteIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.photoBytes = new ArrayList<ByteBuffer>(_list88.size);
          ByteBuffer _elem89;
          for (int _i90 = 0; _i90 < _list88.size; ++_i90)
          {
            _elem89 = iprot.readBinary();
            struct.photoBytes.add(_elem89);
          }
        }
        struct.setPhotoBytesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.extraList = new ArrayList<TimNode>(_list91.size);
          TimNode _elem92;
          for (int _i93 = 0; _i93 < _list91.size; ++_i93)
          {
            _elem92 = new TimNode();
            _elem92.read(iprot);
            struct.extraList.add(_elem92);
          }
        }
        struct.setExtraListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map94.size);
          String _key95;
          String _val96;
          for (int _i97 = 0; _i97 < _map94.size; ++_i97)
          {
            _key95 = iprot.readString();
            _val96 = iprot.readString();
            struct.extraMap.put(_key95, _val96);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

}

